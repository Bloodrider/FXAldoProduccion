<?xml version="1.0" encoding="utf-8"?>

<s:Application 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:mx2="library://ns.adobe.com/flex/halo"
	xmlns:timePicker="com.visualempathy.display.controls.datetime.*"
	xmlns:local="*" 
	xmlns:ns="library:adobe/flex/gumbo" 
	width="100%" height="1000"
	backgroundColor="#FFFFFF" 
	creationComplete="initFact.isPopUp = true; modal.visible = true; consultaAC(); tipoMoneda.setFocus(); Send(1450);" 
	xmlns:components="com.hillelcoren.components.*"
	applicationComplete="validateUser('feSEDENA.swf');">
	
	
	<fx:Script source="r3Take.as"/>
	<fx:Style source="fx.css" />
	<fx:Script>
		<![CDATA[
			import com.hillelcoren.utils.StringUtils;
			
			import mx.collections.ArrayCollection;
			import mx.core.Application;
			import mx.core.ByteArrayAsset;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.formatters.NumberFormatter;
			import mx.managers.PopUpManager;
			import mx.managers.SystemManager;
			import mx.messaging.Producer;
			import mx.utils.StringUtil;
			
			import org.generalrelativity.foam.dynamics.collision.geom.AABR;
			
			import spark.events.IndexChangeEvent;
			
			private var numFtr:NumberFormatter = new NumberFormatter;
			private var numFtrXML:NumberFormatter = new NumberFormatter;
			private var numFtrTotales:NumberFormatter=new NumberFormatter;
			private var pu:Number = 0;
			private var cantidad:Number = 0;
			private var imp:Number = 0;
			private var st:Number = 0;
			private var desc:Number = 0;
			private var IVA:Number = 0;
			private var ret:Number = 0;
			private var neto:Number = 0;	
			private var xmlTextV2:String ="";
			private var xmlTextV3:String ="";
			private var gbTotales:ArrayCollection = new ArrayCollection();	
			private var gbTotalesDG:ArrayCollection = new ArrayCollection();
			private var loadedASM:SystemManager;
			private var addendaComplemento:int;
			private var gb:ArrayCollection = new ArrayCollection();
			private var operacion:int;//0 Generar; 1 Guardar
			private var flgParseaTots:Boolean=true;
			private var flgParseaConceptos:Boolean=true;

			
			private function setFormat():void
			{
				numFtr.precision = precisionDecimales.value;
				numFtr.useThousandsSeparator = false;
				numFtr.useNegativeSign = true;
				numFtr.rounding = decTruncados.selected==true?"none":"nearest";
				
				numFtrTotales.precision = precisionDecimalesTotales.value;
				numFtrTotales.useThousandsSeparator = false;
				numFtrTotales.useNegativeSign = true;
				numFtrTotales.rounding = decTruncados.selected==true?"none":"nearest";
				
				numFtrXML.useNegativeSign = false;
			}
			private function entrar():void
			{		
				
				setFormat();
				if(tipoMoneda.selectedIndex < 0)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("Debe seleccionar el tipo de Moneda.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);
					tipoMoneda.setFocus();
					tipoMoneda.errorString = "Debe seleccionar el tipo de Moneda.";
				}
				
				if(tipoMoneda.selectedItem[1].toString() == "DOLARES")
				{
					if(tasaCambio.text.length == 0)
					{
						Alert.okLabel = "Aceptar";
						Alert.show("Para poder continuar, es necesario tener una tasa de cambio, para cualquier duda contacte al administrador del sistema.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);
						tasaCambio.setFocus();
						tasaCambio.errorString = "Tasa de Cambio requerida";
						return;
					}
				}		
				if(cbMetodoPago.selectedIndex< 0)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("Para poder continuar, es necesario agregar un método de pago, para cualquier duda contacte al administrador del sistema.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);
					metodoPago.setFocus();
					metodoPago.errorString = "Método de Pago requerido";
					return;
				}
				
				if(tasaValid.text == "1")
				{
					Alert.okLabel = "Aceptar";
					Alert.show("La tasa de cambio es incorrecta, favor de corregirla.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);
					tasaCambio.setFocus();
					return;
				}
				
				if(tasaCambio.text.length == 0)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("La tasa de cambio es requerida, favor de ingresarla.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);
					tasaCambio.setFocus();
					return;
				}
				
				if(cTipoCFDI.selectedIndex == -1||cTipoCFDI.selectedItem[0].toString()=="0"){
					
					Alert.okLabel = "Aceptar";
					Alert.show("Debe seleccionar un Tipo de Comprobante Fiscal Digital, favor de Verificar.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);
					cTipoCFDI.setFocus();
					cTipoCFDI.errorString = "Tipo de Comprobante requerido";
					return;
				}
				
				if(isConfigured.text=="0"){
					
					Alert.okLabel = "Aceptar";
					Alert.show("Antes de generar el CFDI, es necesario configurarlo ingresando al Menú Catálogos > Configura tu CFDI","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);
					return;
				}
				if(parseInt(validaExisteClientes.text) > 0)
				{
					Send(1301);//LLENA EL COMBOBOX DE IMPUESTOS DEPENDIENDO DEL TIPO DE COMPROBANTE
				}
				else
				{
					Terminar.enabled = false;
					Alert.okLabel = "Aceptar";
					Alert.show("Para poder generar un CFDI es necesario tener al menos un cliente configurado.", "Mensaje FacturaXion",Alert.OK,null, null, iconDel);
					return;
				}
				
				numFtr.precision = precisionDecimales.value;
				numFtrTotales.precision=precisionDecimalesTotales.value;
				validadorPrecio.precision=precisionDecimales.value;
				validadorPrecioUnitario.precision=precisionDecimales.value;
				enabledAllControls();
				
				tipoMoneda.errorString = "";
				metodoPago.errorString = "";
				tasaCambio.errorString = "";
				
				metodoPagoR.text = cbMetodoPago.textInput.text;
				tipoMonedaR.text = tipoMoneda.selectedItem[0].toString();
				tasaCambioR.text = tasaCambio.text;
				noOrdenCompraR.text = noOrdenCompra.text;
				
				initFact.visible = false;
				
				//Campos Adicionales
				if ((parseInt(countCamposAdicionales.text) > 0)&&(countCamposAdicionales.text != ""))
				{
					Send(523); // Llena Datagrid campos Adicionales
					TTWvalores.visible = true;
					btnAdendas.visible = true;
					return;
				}
				
				TTWvalores.visible = false;
				btnAdendas.visible = false; 
				
				modal.visible = false;
				receptor.setFocus();
			}
			
			private function rellenaMetodosPago():void
			{
				cbMetodoPago.selectedIndex=0;
				metodoPago.text=cbMetodoPago.selectedItem[1].toString();
				Alert.show(metodoPago.text);
			}
			
			private function add():void
			{		
				//mx.core.Application.application.stopCountdown();
				//mx.core.Application.application.beginCountdown();
				
				var validConcept:String = concepto.text;
				
				var patternME:RegExp = /[\<+]/gi;	
				var patternMA:RegExp = /[\>+]/gi;
				var patternComillas:RegExp = /[\"+]/gi;
				var patternComillasSimples:RegExp = /[\'+]/gi;
				
				while (validConcept.search(patternME) != -1 )
				{
					validConcept = validConcept.replace(patternME, "");
				}
				while (validConcept.search(patternMA) != -1 )
				{
					validConcept = validConcept.replace(patternMA, "");
				}
				while (validConcept.search(patternComillas) != -1 )
				{
					validConcept = validConcept.replace(patternComillas, "");
				}
				while (validConcept.search(patternComillasSimples) != -1 )
				{
					validConcept = validConcept.replace(patternComillasSimples, "&apos;");
				}
				
				concepto.text = validConcept;
				
				validadorPrecio.validate();
				
				if(concepto.text.length == 0)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("Debe especificar el concepto.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);				
					concepto.setFocus();
					concepto.errorString = "Debe especificar el concepto";
					return;
				}
				if(um.selectedIndex < 0)
				{		
					Alert.okLabel = "Aceptar";
					Alert.show("Debe seleccionar una Unidad de Medida.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);				
					um.setFocus();
					um.errorString = "Debe seleccionar una Unidad de Medida";
					return;
				}
				if(cant.text.length == 0 || cant.text == "0")
				{
					Alert.okLabel = "Aceptar";
					Alert.show("Debe especificar la cantidad y esta no puede ser cero..","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);				
					cant.setFocus();
					cant.errorString = "Debe especificar la cantidad";
					return;
				}
				if(precio.text.length == 0)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("Debe especificar el Precio.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);				
					precio.setFocus();
					precio.errorString = "Debe especificar el Precio";
					return;
				}
				
				if(impuesto.selectedIndex < 0)
				{			
					Alert.okLabel = "Aceptar";
					Alert.show("Debe seleccionar el impuesto.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);				
					impuesto.setFocus();
					impuesto.errorString = "Debe seleccionar el impuesto";
					return;
				}
				
				if(precioValid.text == "1")
				{
					Alert.okLabel = "Aceptar";
					Alert.show("El Precio no tiene el formato correcto.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);				
					precio.setFocus();
					return;				
				}
				
				if(cantValid.text == "1")
				{
					Alert.okLabel = "Aceptar";
					Alert.show("La Cantidad es numérico con seis posiciones decimales.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);				
					cant.setFocus();
					return;	
				}
				
				if(precio.text == "" || parseFloat(precio.text) <= 0.00)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("El precio debe ser mayor a 0.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);				
					precio.setFocus();
					precio.errorString = "El precio debe ser mayor a 0","Error en precio";
					return;	
				}
				
				
				
				if(conceptos.dataProvider != null)
				{
					gb = new ArrayCollection(ArrayUtil.toArray(conceptos.dataProvider.source));
				}
				
				pu = Number(precioMonedaDestino.text.replace(/,/g, "")); 
				cantidad=Number(cant.text);
				st = (cantidad * pu*100)/100;
				desc = st * (descuento.value/100);
				
				var valsImp:Array = new Array();
				var valsImpDet:Array = new Array();
				var descString:String = "";
				
				
				valsImp = impuesto.selectedItem[0].toString().split("#");
				
				for(var imp:int=0; imp < valsImp.length; imp++)
				{            	
					valsImpDet = valsImp[imp].toString().split("|");
					
					var porcentImp:Number = Number(valsImpDet[1]);
					
					if(porcentImp > 0)
					{
						descString += "Traslados " + valsImpDet[0] + " " + valsImpDet[1].toString() + ": $ " + numFtr.format(((porcentImp / 100) * (st - desc))) + " \n";            		           		
					}else if(porcentImp < 0)
					{
						descString += "Retención " + valsImpDet[0] + " " + valsImpDet[1].toString() + ": $ " + numFtr.format(((porcentImp / 100) * (st - desc))) + " \n";
					}  
				}
				var cadenaInfAduanera:String="";
				if(detalleAduana.dataProvider!=null && detalleAduana.dataProvider.length>0)
				{
					var arrayDetalleAduana:ArrayCollection=new ArrayCollection(ArrayUtil.toArray(detalleAduana.dataProvider.source));
					
					for(var idxInfAduanera=0;idxInfAduanera<arrayDetalleAduana.length;idxInfAduanera++)
					{
						cadenaInfAduanera+=arrayDetalleAduana[idxInfAduanera][0].toString()+"|";
						cadenaInfAduanera+=arrayDetalleAduana[idxInfAduanera][1].toString()+"|";
						cadenaInfAduanera+=arrayDetalleAduana[idxInfAduanera][2].toString();
						cadenaInfAduanera+=(idxInfAduanera+1<arrayDetalleAduana.length)?"!":"";
					}
				}
				concepto.text=replaceAll(concepto.text,"<","");
				concepto.text=replaceAll(concepto.text,">","");
				concepto.text=replaceAll(concepto.text,'"',"");
				concepto.text=replaceAll(concepto.text,"'","");
				concepto.text=replaceAll(concepto.text,"&","");
				concepto.text=replaceAll(concepto.text,";","");
				
				//Agregamos la partida al arreglo gb
				gb.addItem(
					{0:concepto.text, 
						1:truncaRedondeaDecimales((decTruncados.selected==true?0:1),cantidad,4), //n
						2:numFtr.format(pu), 
						3:numFtr.format((cantidad* pu*100 )/100),
						4:descuento.value.toString(), 
						5:numFtr.format(desc),
						6:impuesto.selectedItem[0],				 
						7:um.selectedItem[0].toString(),
						8:impuesto.selectedItem[1].toString(),
						9:((descuento.value!=0) ? "Descuento " + descuento.value.toString() + "% : " + numFtr.format(desc)+ "    \n": "\n") + descString,
						10:numFtr.format(((cantidad * pu*100)/100) - desc),
						11:impuesto.selectedItem[0],
						12:numFtrXML.format(((cantidad * pu*100)/100)- desc),
						13:impuesto.selectedItem[2].toString(),
						14:um.selectedItem[1].toString(),
						15:((cantidad * pu*100)/100) - desc,//n
						16:desc,//n
						17:cadenaInfAduanera,
						18:productoEnCatalogo.text
					}
				);
				
				calcular(gb);  
				acProductoPasoText.text="";
				conceptos.dataProvider = gb;
				//autocompleteProductosText.text = "";
				autocompleteProductosText.clear();
				
				descuento.value = 0;
				um.selectedIndex = -1;
				concepto.text = "";
				productoEnCatalogo.text="N";
				impuesto.selectedIndex = 0;
				cant.text = "1";
				precio.text = prefijoCeroPesos(int(precisionDecimales.value));
				tipoCambioProducto.text="";
				precioPesos.text="";
				precioMonedaDestino.text="";
				detalleAduana.dataProvider=null;
				
				autocompleteProductosText.selectedItem = null;
				concepto.text = "";
				//autocompleteProductosText.dataProvider = acACProductos;
			}
			
			private function replaceAll(org:String, fnd:String, rpl:String):String
			{
				return org.split(fnd).join(rpl);
			}
			
			private function prefijoCeroPesos(decimales:int):String
			{
				var prefijo:String="0."
				for(var count:int=0;count<decimales;count++)
				{
					prefijo=prefijo.concat("0");
				}
				return prefijo;
			}
			
			private function calcular(gb:ArrayCollection):void
			{
				var total:Number = 0;
				var subTotal:Number = 0;
				var error:String="";
				var stAcumulado:Number=0;
				var impDet:Array = new Array();
				var valsImpDet:Array = new Array();
				var porcentImp:Number = 0;
				var conceptImp:String = "";
				var impNuevo:int = 0;
				var esTotal:int = 0;
				var palabraRet:String = "";
				var valueImp:Number = 0;
				
				
				gbTotales = new ArrayCollection(); 
				
				gbTotales = new ArrayCollection(ArrayUtil.toArray(totales.dataProvider.source));
				
				//Inicializamos variables númericas del arreglo gbTotales
				for(var numgbTotales:int=0; numgbTotales < gbTotales.length; numgbTotales++)
				{
					gbTotales[numgbTotales][1] = 0;
					gbTotales[numgbTotales][3] = 0;
					gbTotales[numgbTotales][5] = 0;
				}
				var usaIVAIEPS:Boolean;
				//Recorremos el arreglo gb, que contiene el arreglo de impuestos de la tabla de impuestosDetalle
				for(var numImpDet:int=0; numImpDet < gb.length; numImpDet++)
				{
					//Validamos para este concepto el uso del IVA sobre IEPS
					if(	gb[numImpDet][8].toString()=="IVA 16% SOBRE IEPS 53%"||
						gb[numImpDet][8].toString()=="IVA 16% SOBRE IEPS 30%"||
						gb[numImpDet][8].toString()=="IVA 16% SOBRE IEPS 25%")
					{
						usaIVAIEPS=true;
					}
					else
					{
						usaIVAIEPS=false;
					}
					impDet = gb[numImpDet][11].toString().split("#");
					
					for(var imp:int=0; imp < impDet.length; imp++)
					{            	
						valsImpDet = impDet[imp].toString().split("|");	            	
						porcentImp= Number(valsImpDet[1]);
						conceptImp= valsImpDet[0].toString();
						
						//Validamos que el impuesto no sea cero, para continuar con el calculo
						if(porcentImp != 0)
						{  	    
							//Por cada impuesto de la tabla de impuestoDetalle, recorremos el arreglo del Subtotal, total y los impuestos agregados.
							for(var impTotales:int=0; impTotales < gbTotales.length; impTotales++)
							{		 
								//Si los impuestos coinciden es decir se tenemos una partida de 16 % de IVA y se agrega una con el mismo impuesto, las cifras las suma
								if(gbTotales[impTotales][0].toString() == valsImpDet[0].toString() + " " + Number(valsImpDet[1]).toString().replace(".00", "") && (gbTotales[impTotales].hasOwnProperty([6]) && gbTotales[impTotales][6]==usaIVAIEPS || valsImpDet[0].toString()!="IVA") )
								{
									gbTotales[impTotales][1] += ((porcentImp / 100) * (Number(gb[numImpDet][15])));
									gbTotales[impTotales][3] = numFtrTotales.format(Math.abs(gbTotales[impTotales][1]));
									gbTotales[impTotales][5] = Math.abs(valsImpDet[1]).toString();
									impNuevo = 1;
								}           			
							}
							
							//Si el impuesto no coincide en la validación anterior, significa que el impuesto es diferente, y hay que crearlo
							if(impNuevo == 0)
							{
								
								if(Number(valsImpDet[1]) < 0)
								{
									//Si el impuesto es menor que cero es una retención
									palabraRet = "";
								}
								else
								{
									//Si el impuesto es menor que cero es un traslado
									palabraRet = "";
								}
								//Agregamos al arreglo gbTotales el nuevo impuesto
								gbTotales.addItem({	0:valsImpDet[0].toString() + " " + Number(valsImpDet[1]),  //V
													1:(porcentImp / 100) * (Number(gb[numImpDet][15])), //N
													2: palabraRet + valsImpDet[0].toString() + " " + Math.abs(Number(usaIVAIEPS==true && valsImpDet[0].toString()=="IVA" ? "16.00" : valsImpDet[1]))  + " %", //v
													3:numFtrTotales.format(((Math.abs(porcentImp) / 100) * (Number(gb[numImpDet][15])))), //V    antes el último multiplicando era: st-desc
													4:valsImpDet[0].toString(), //v
													5:Math.abs(valsImpDet[1]).toString(), //N
													6:usaIVAIEPS==true && valsImpDet[0].toString()=="IVA" ? true:false });//B
								
							}
							else
							{
								impNuevo = 0;
							} 
						}
					}
				}
				
				//Sumamos la lista de importes para sacar el Total
				for(var numDetImp:int=0; numDetImp < gb.length; numDetImp++)
				{    			
					subTotal += Number(gb[numDetImp][10]);           			
				}
				//Damos formato y lo agregamos al arreglo gbTotales
				gbTotales[0][1] = subTotal;
				gbTotales[0][3] = numFtrTotales.format(subTotal);
				
				var numTotalImp:int = gbTotales.length;
				
				//	Recorremos todo el arreglo para realizar ordenamiento, ya que debe de estar como Subtotal, lista de impuestos, y total.	
				for(var numImpuesto:int=0; numImpuesto < gbTotales.length; numImpuesto++)
				{ 
					//Si la descripción es igual a Total, lo eliminamos para despues agregarlo al final.
					if(gbTotales[numImpuesto][0].toString() == "Total")
					{
						gbTotales.removeItemAt(numImpuesto);
						numImpuesto--;
					}
					else
					//if(gbTotales.length >= numImpuesto)
					{
						//Calculamos el total
						total = ((total*100) + (gbTotales[numImpuesto][1]*100))/100;
						
						if(gbTotales[numImpuesto][1].toString() == "0" && gbTotales[numImpuesto][0].toString() != "Subtotal" && gbTotales[numImpuesto][0].toString() != "Total")
						{
							gbTotales.removeItemAt(numImpuesto);
							numImpuesto--;
							numTotalImp = numTotalImp -1;		
						}
					}							    			     			
				}  
				
				numTotalImp = gbTotales.length;
				for(var numImpuesto:int=0; numImpuesto < gbTotales.length; numImpuesto++)
				{     			
					if(gbTotales.length > numImpuesto)
					{					
						if(gbTotales[numImpuesto][1].toString() == "0" && gbTotales[numImpuesto][0].toString() != "Subtotal" && gbTotales[numImpuesto][0].toString() != "Total")
						{
							gbTotales.removeItemAt(numImpuesto);
							numTotalImp = numTotalImp -1;		
						}
					}							    			     			
				}
				
				//Agregamos el Total, que era el que quitamos anteriormente, y lo ponemkos justo al final del Arreglo para finalizar con el ordenamiento.
				if(gbTotales[gbTotales.length - 1][0].toString() != "Total")
				{
					gbTotales.addItem({0:"Total",  1:total, 2:"Total", 3:numFtrTotales.format(total), 4:"", 5:0});
				}
				else
				{
					gbTotales.removeItemAt(gbTotales.length - 1);            
					gbTotales.addItem({0:"Total",  1:total, 2:"Total", 3:numFtrTotales.format(total), 4:"", 5:0});
				}
				for(numgbTotales =0;numgbTotales<gbTotales.length;numgbTotales++)
				{
					gbTotales[numgbTotales][1]=truncaRedondeaDecimales((decTruncados.selected==true?0:1),gbTotales[numgbTotales][1],int(precisionDecimalesTotales.value));
				}
				totales.dataProvider = gbTotales;
				
				
			}	
			
			private function addTotales():void
			{
				gbTotales.addItem({0:"Subtotal",  1:0, 2:"Subtotal", 3:0, 4:"", 5:0});
				gbTotales.addItem({0:"Total",  1:0, 2:"Total", 3:0,4:"", 5:0});
				
				totales.dataProvider =gbTotales;
			}
			
			private function remove():void
			{
				var gb:ArrayCollection = new ArrayCollection();
				
				if(conceptos.selectedIndex < 0)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("Debe seleccionar el concepto a eliminar.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);				
					conceptos.setFocus();
					conceptos.errorString = "Debe seleccionar el concepto a eliminar";
					return;
				}
				if(conceptos.dataProvider != null)
				{
					gb = new ArrayCollection(ArrayUtil.toArray(conceptos.dataProvider.source));
				}
				gb.removeItemAt(conceptos.selectedIndex);
				conceptos.dataProvider = gb;
				calcular(gb);	            
			}
			
			private function generarDocumento():void
			{
				Send(167);	            
			}
			
			
			private function ayuda():void
			{
				navigateToURL(new URLRequest("http://fx.facturaxion.com/facturaxion/ayuda/factura/factura.htm"),"_blank");
			}
			
			import mx.events.CloseEvent;
			
			private function validaGenerarFactura():void
			{
				if(receptorAC.visible==true && (receptorAC.selectedItem==null || receptorAC.selectedItem<0))
				{
					Alert.okLabel = "Aceptar";
					Alert.show("No se ha seleccionado correctamente el receptor del CFDI, favor de verificar.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);				
					receptorAC.setFocus();
					return;
				}
				if(conceptos.dataProvider == null || conceptos.rowCount == 0)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("Debe de crear al menos un concepto.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);				
					concepto.setFocus();
					return;
				}
				
				if(receptor.selectedIndex < 0)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("Debe de seleccionar un receptor.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);				
					receptor.setFocus();
					receptor.errorString = "Seleccione un receptor.";
					return;
				}
				
				if(folio.selectedIndex < 0)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("Debe de seleccionare una serie.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);				
					folio.setFocus();
					folio.errorString = "Seleccione una serie.";
					return;
				}	
				
				
				Alert.yesLabel = "Sí";
				Alert.noLabel = "No";
				Alert.cancelLabel = "Cancelar";
				Alert.okLabel = "Aceptar"
				Alert.show("¿Está seguro de querer generar el CFDI?", "Mensaje FacturaXion", Alert.OK | Alert.CANCEL, this, alertListener, iconQuestion, Alert.OK);
				return;
				
			}
			
			private function alertListener(eventObj:CloseEvent):void
			{
				if (eventObj.detail==Alert.OK) 
				{
					//En el siguiente segmento de código 
					//se unifica el IVA 16 % sobre IEPS,
					//si lo hay, con el IVA ordinario
					var posicionesIVAIEPS:ArrayCollection=new ArrayCollection();
					var found1600:Boolean=false;
					var idxIVAIEPS:int=1;
					var idx1600:int=1;
					//Rastramos si se usó un IVA sobre IEPS
					do
					{
						if(gbTotales[idxIVAIEPS][6]==true)
						{
							posicionesIVAIEPS.addItem(idxIVAIEPS);
							//foundIVAIEPS=true;
						}
						idxIVAIEPS++;
					}
					while(idxIVAIEPS<gbTotales.length-1 );
					
					//Rastreamos si se usó un IVA 16 Trasladado%
					do
					{
						if(gbTotales[idx1600][0]=="IVA 16" && gbTotales[idx1600][1]>=0)
						{
							found1600=true;
						}
						else
						{
							found1600=false;
							idx1600++;
						}
					}
					while(idx1600<gbTotales.length-1 && found1600==false);
					if(posicionesIVAIEPS.length>0)
					{
						//Si se usó algún IVA sobre IEPS, se enmascara como normal
						var idxPosiciones:int;
						for(idxPosiciones=0;idxPosiciones<posicionesIVAIEPS.length;idxPosiciones++)
						{
							gbTotales[posicionesIVAIEPS[idxPosiciones]][0]="IVA 16.00";
							gbTotales[posicionesIVAIEPS[idxPosiciones]][5]="16.00";
						
							if(found1600==true)
							{
							//Pero si se usó el IVA 16 Trasladado, este 
							//absorve al IVA sobre IEPS
								gbTotales[idx1600][1]=(Number(gbTotales[idx1600][1])+Number(gbTotales[posicionesIVAIEPS[idxPosiciones]][1]));
								gbTotales[idx1600][3]=numFtrTotales.format(Number(gbTotales[idx1600][3])+Number(gbTotales[posicionesIVAIEPS[idxPosiciones]][3]));
							}
							else
							{
								//En cambio si no se usó IVA 16 Trasladado
								//se unificarán todos los IVA sobre IEPS en el primero
								if(idxPosiciones>0)
								{
									gbTotales[posicionesIVAIEPS[0]][1]=(Number(gbTotales[posicionesIVAIEPS[0]][1])+Number(gbTotales[posicionesIVAIEPS[idxPosiciones]][1]));
									gbTotales[posicionesIVAIEPS[0]][3]=numFtrTotales.format(Number(gbTotales[posicionesIVAIEPS[0]][3])+Number(gbTotales[posicionesIVAIEPS[idxPosiciones]][3]));
								}
							}
						}
						//Eliminaremos los IVAs sobrantes
						for(idxPosiciones=posicionesIVAIEPS.length-1;idxPosiciones>=(found1600==true?0:1);idxPosiciones--)
						{
							gbTotales.removeItemAt(posicionesIVAIEPS[idxPosiciones]);
						}
					}
					//**************************************
					
					importeTotal.text=gbTotales[gbTotales.length-1][1].toString();
					modal.visible = true;
					receptor.errorString = "";
					folio.errorString = "";
					if (parseInt(cCountAddendas.text)>0 || usaDonatarias.selected==true || usaImpuestosLocales.selected==true)
					{
						contenedorAddenda.visible=true;
						disableAllcontrols();
						
						if (usaDonatarias.selected==true)
						{
							listadoAddendasReceptor.visible=false;
							listadoAddendasReceptor.enabled=false;
							lblComplementoNombre.text="Donatarias 1.0";
							lblComplementoNombre.visible=true;
							addendaComplemento=2; //Será un complemento
							usaAddenda.text="2";
						}
						else if(usaImpuestosLocales.selected==true)
						{
							listadoAddendasReceptor.visible=false;
							listadoAddendasReceptor.enabled=false;
							lblComplementoNombre.text="Impuestos Locales 1.0"
							lblComplementoNombre.visible=true;
							addendaComplemento=2; //Será un complemento
							usaAddenda.text="2";
						}
						else
						{
							listadoAddendasReceptor.visible=true;
							listadoAddendasReceptor.enabled=true;
							lblComplementoNombre.visible=false;
							addendaComplemento=1; //Será una addenda
							usaAddenda.text="1";
							
						}
						Send(679);
						
					}
					else
					{
						//Ni addenda ni complemento
						usaAddenda.text="0";
						sendGeneraCFDI();
					}
					//Se extrae el send a la función sendGeneraFactura(), para
					//no duplicar la llamada por el lado de la addenda
					//Send(227);
				}
			}
			
			private function sendGeneraCFDI()
			{
				Send(operacion==0?1289:1236);
			}
			
			private function setTasa():void
			{
				if(tipoMoneda.selectedIndex > -1)
				{
						tasaCambio.text = tipoMoneda.selectedItem[3].toString();
						tasaCambio.editable = true;
				}
				
			}
			
			private function setTipoCFDI():void
			{
				if(cTipoCFDI.selectedIndex > -1)
				{
					countCamposAdicionales.text = "";
					
					if(cTipoCFDI.selectedItem[0].toString()=="1"){//FACTURA
						tipoCFDI.text = "ingreso";
						tipoComprobante.text = cTipoCFDI.selectedItem[0].toString();
					}
					else if(cTipoCFDI.selectedItem[0].toString()=="2"){//NOTA DE CREDITO
						tipoCFDI.text = "egreso"
						tipoComprobante.text = cTipoCFDI.selectedItem[0].toString();
					}
					else if(cTipoCFDI.selectedItem[0].toString()=="3"){//RECIBO DE ARRENDAMIENTO
						tipoCFDI.text = "ingreso";
						tipoComprobante.text = cTipoCFDI.selectedItem[0].toString();
					}
					else if(cTipoCFDI.selectedItem[0].toString()=="4"){//RECIBO DE HONORARIOS
						tipoCFDI.text = "ingreso"
						tipoComprobante.text = cTipoCFDI.selectedItem[0].toString();
					}
					else if(cTipoCFDI.selectedItem[0].toString()=="5"){//CARTA PORTE
						tipoCFDI.text = "traspaso"
						tipoComprobante.text = cTipoCFDI.selectedItem[0].toString();
					}
					else if(cTipoCFDI.selectedItem[0].toString()=="6"){//NOTA DE ARRENDAMIENTO
						tipoCFDI.text="ingreso"
						tipoComprobante.text = cTipoCFDI.selectedItem[0].toString();
					}
					
					Send(626); //Verifica si el tipo de comprobante tiene campos adicionales
				}
				Send(701);//INDICA SI EL USUARIO CONFIGURO EL CFDI A GENERAR
			}
			
			private function seleccionarReceptor():void
			{	
				if(receptor.selectedIndex > -1)
				{
					idSucursalReceptor.text = receptor.selectedItem[13].toString();
					rfcReceptor.text = receptor.selectedItem[2].toString();
					idReceptor.text = receptor.selectedItem[0].toString();
					nombreReceptor.text = receptor.selectedItem[1].toString();
					
					Send(678);
				}
			}
			
			private function salir():void
			{
				
				mx.controls.SWFLoader(findObject("globalLoader", "SWFLoader")).source ="init.swf";
				
			}
			
			[Bindable]	private var _contacts:ArrayCollection;
			
			[Bindable]  private var myFileClass:Class; 
			
			public function dropDownLabelFunction( item:Object ):String
			{
				var string:String = item[0];
				var searchStr:String = autocompleteProductosText.searchText;
				
				var returnStr:String = StringUtils.highlightMatch( string, searchStr);
				
				if (autocompleteProductosText.selectedItems.getItemIndex( item ) >= 0)
				{
					returnStr = "<font color='" + Consts.COLOR_TEXT_DISABLED + "'>" + returnStr + "</font>";
				}
				
				return returnStr;
			}
			
			private function consultaAC():void
			{
			
				Send(627);
				disableAllcontrols();
				Send(1288);
			}
			
			private function enabledAllControls():void
			{
				receptor.enabled = (((idRol.text=="51"||idRol.text=="50"||idRol.text=="49")&&emitida.text=="False")?false:true);
				folio.enabled = (((idRol.text=="51"||idRol.text=="50"||idRol.text=="49")&&emitida.text=="False")?false:true);
				autocompleteProductosText.enabled =true;// (idRol.text=="51"?false:true);
				um.enabled = true;
				cant.enabled = true;
				precio.enabled = true;
				descuento.enabled = true;
				impuesto.enabled = true;
				//btnAddProducto.enabled = true;
				agregar.enabled =(((idRol.text=="51"||idRol.text=="50"||idRol.text=="49")&&emitida.text=="False")?false:true);
				eliminar.enabled =(((idRol.text=="51"||idRol.text=="50"||idRol.text=="49")&&emitida.text=="False")?false:true);
				observaciones.enabled = true;
				generar.enabled =(idRol.text=="52"?false:true);
				btnPagoParcialidades.enabled=(idRol.text=="52"?false:true);
				guardar.enabled=  (((idRol.text=="51"||idRol.text=="50"||idRol.text=="49")&&emitida.text=="False")||usaDonatarias.selected==true?false:true);
				guardar.visible=  (((idRol.text=="51"||idRol.text=="50"||idRol.text=="49")&&emitida.text=="False")?false:true);
				eliminarPreCFDI.visible=(((idRol.text=="51"||idRol.text=="50"||idRol.text=="49")&&emitida.text=="False")?true:false);
				eliminarPreCFDI.enabled=(((idRol.text=="51"||idRol.text=="50"||idRol.text=="49")&&emitida.text=="False")?true:false);
				conceptos.enabled = true;	
				conHead.enabled = true;	
				totales.enabled = true;	
				usaDonatarias.enabled=((idRol.text=="51"||idRol.text=="50"||idRol.text=="49")?true:false);
				usaDonatarias.visible=((idRol.text=="51"||idRol.text=="50"||idRol.text=="49")?true:false);
				usaImpuestosLocales.enabled=true;
				//setRestringeGratuito();
				//validaEmitida();
			}
			
			private function disableAllcontrols():void
			{
				receptor.enabled = false;
				folio.enabled = false;
				autocompleteProductosText.enabled = false;
				um.enabled = false;
				cant.enabled = false;
				precio.enabled = false;
				descuento.enabled = false;
				impuesto.enabled = false;
				//btnAddProducto.enabled = false;
				agregar.enabled = false;
				eliminar.enabled = false;
				observaciones.enabled = false;
				generar.enabled = false;
				btnPagoParcialidades.enabled=false;				
				conceptos.enabled = false;	
				conHead.enabled = false;	
				totales.enabled = false;
				//usaDonatarias.enabled=false;
				usaImpuestosLocales.enabled=false;
				eliminarPreCFDI.enabled=false;
			}
			
			private var acACProductos = new ArrayCollection();
			private function loadACproductos():void
			{	
				
				acACProductos = new ArrayCollection(ArrayUtil.toArray(acProductosGV.dataProvider.source));
				
				autocompleteProductosText.dataProvider = acACProductos;		
			}
			
			private function verItemSelect():void
			{		
				
				if(autocompleteProductosText.selectedItem != null)
				{
					try
					{
						if (autocompleteProductosText.selectedItem[0] != null)
						{
							acProductoPasoText.text = autocompleteProductosText.selectedItem[0].toString();	
						}
					}
					catch(e:Error)
					{
						acProductoPasoText.text =  autocompleteProductosText.selectedItem;
					}
				}
				
			}
			
			private function fillControls():void
			{
				if(acProductoPasoText.text.length > 0)
				{		
					Send(1291);
				}
				else
				{
					concepto.text = "";
					precio.text = "";
					precioPesos.text="";
					precioMonedaDestino.text="";
					tipoCambioProducto.text="";
					um.selectedIndex = 0;			
				}
			}
			
			private function addProductoAndValid():void
			{
				if(descripcionAdd.text.length == 0)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("Para agregar el producto es necesario ingresar una descripción.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);				
					descripcionAdd.setFocus();
					descripcionAdd.errorString = "Debe especificar la descripción.";
					return;
				}
				
				if(descripcionCortaAdd.text.length == 0)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("Para agregar el producto es necesario ingresar una descripción corta.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);				
					descripcionCortaAdd.setFocus();
					descripcionCortaAdd.errorString = "Debe especificar la descripción corta.";
					return;
				}
				
				if(precioUnitarioAdd.text.length == 0)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("Para agregar el producto es necesario ingresar un precio unitario.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);				
					precioUnitarioAdd.setFocus();
					precioUnitarioAdd.errorString = "Debe especificar el precio.";
					return;
				}
				
				if(precioAddValid.text == "1")
				{
					Alert.okLabel = "Aceptar";
					Alert.show("El Precio es numérico con las posiciones decimales definidas para el comprobante.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);				
					precioUnitarioAdd.setFocus();
					return;				
				}
				
				if(umAdd.selectedIndex < 0)
				{		
					Alert.okLabel = "Aceptar";
					Alert.show("Debe seleccionar una Unidad de Medida.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);				
					umAdd.setFocus();
					umAdd.errorString = "Debe especificar la unidad de medida.";
					return;
				}		
				
				modal.visible = false;
				enabledAllControls();
				Send(290);
				Send(1288);		
				addProducto.visible = false;
				descripcionAdd.text = "";
				descripcionCortaAdd.text = "";
				precioUnitarioAdd.text = "";
				umAdd.selectedIndex = 0;
			}
			
			private function navegarPDF():void
			{
				var rutaPDFExtern
				if(rutaPDF.text.indexOf("fx.facturaxion.com") == -1)
				{
					rutaPDFExtern = rutaPDF.text.substr(11, rutaPDF.text.length);
				}
				else
				{
					rutaPDFExtern = rutaPDF.text.replace("http://fx.facturaxion.com/", "");
				}
				
				var request:URLRequest = new URLRequest(rutaPDFExtern);
				request.contentType = "application/pdf";
				var fileRef:FileReference = new FileReference();
				navigateToURL(request, '_blank');	
			}
			
			private function navegarXML():void
			{
				var rutaArchivoXML:String;
				rutaArchivoXML=rutaPDF.text;
				rutaArchivoXML=rutaArchivoXML.replace(".pdf",".xml");
				var rutaPDFExtern;
				
				if(rutaArchivoXML.indexOf("fx.facturaxion.com") == -1)
				{
					rutaPDFExtern = rutaArchivoXML.substr(11, rutaArchivoXML.length);
				}
				else
				{
					rutaPDFExtern = rutaArchivoXML.replace("http://fx.facturaxion.com/", "");
				}
				
				var request:URLRequest = new URLRequest(rutaPDFExtern);
				//request.contentType = "application/pdf";
				var fileRef:FileReference = new FileReference();
				navigateToURL(request, '_blank');	
			}
			
			private function enviarFactEmail():void
			{
				if(Number(idRol.text)!=16)
				{
					//To - Do: Validar la Expresion regular del Email
					if(correo.text.length == 0)
					{
						Alert.okLabel = "Aceptar";
						Alert.show("Para enviar el CFDI es necesario ingresar un correo electrónico, favor de ingresarlo.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);				
						correo.setFocus();
						correo.errorString = "Debe especificar un correo electrónico.";
						return;
					}
					
					if(!expMail.test(correo.text))
					{
						Alert.okLabel = "Aceptar";
						Alert.show("El formato de correo electrónico no es correcto.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);
						correo.setFocus();
						correo.errorString = "El formato de correo electrónico no es correcto.";
						return;
					} 	
					Send(1345);//Envía CFD por Correo.
				}
				else
				{
					mensajeRol16();
				}
			}
			
			[Embed(source="assets/delete-icon_32.png")]	[Bindable] public var iconFail:Class;
			[Embed(source="assets/accept-icon_32.png")] [Bindable] public var iconOK:Class;
			[Embed(source="assets/2519-32.png")] 		[Bindable] public var iconQuestion:Class;
			
			private function validSendEmail():void
			{
				if(correoEnviado.text == "1")
				{
					Alert.okLabel = "Aceptar";
					Alert.yesLabel = "Sí";
					Alert.noLabel = "No";
					Alert.show("El Comprobante Fiscal Digital se ha enviado de manera correcta.", "Mensaje FacturaXion",Alert.OK, null, doReNew, iconOk);
				}
				else if(correoEnviado.text == "0")
				{
					Alert.okLabel = "Aceptar";
					Alert.show("El Comprobante Fiscal Digital no se pudo enviar de manera correcta, intente nuevamente.", "Mensaje FacturaXion",Alert.OK,null, null, iconDel);
				}
				correoEnviado.text="";
			}
			
			private function doReNew(eventObj:CloseEvent):void
			{
				if (eventObj.detail==Alert.YES) 
				{
					closeTWCFD();
				}
			}
			
			private var expMail:RegExp = /^[\w-]+(?:\.[\w-]+)*@(?:[\w-]+\.)+[a-zA-Z]{2,7}$/;
			
			private function checkMail(myCtrl:spark.components.TextInput):void
			{
				if(expMail.test(myCtrl.text))
				{
					myCtrl.errorString = "";
				}
				else
				{				
					myCtrl.errorString = "Correo electrónico Incorrecto\n\n" +
						"Formato “cuenta1.cuenta2@dominio.com ” \n" +
						"“El campo Para sólo permite un Destinatario, si necesita enviar a más destinatarios utilice el campo CC y CCo”";
				}			
			}
			
			private function closeTWCFD():void
			{
				mx.core.Application.application.stopCountdown();
				mx.core.Application.application.beginCountdown();
				mx.controls.SWFLoader(findObject("globalLoader", "SWFLoader")).source ="nada.swf";
				mx.controls.SWFLoader(findObject("globalLoader", "SWFLoader")).source ="feSEDENA.swf?fecha=04042012";			
			}
			
			private function viewTWCFD():void
			{
				//if(rutaPDF.text.length > 0)
				//{
				//	modal.visible = true;
					
					if(tipoRegistro.text=="1")
					{
						confirmaRegistro.visible=true;
						leyendaRegistro.text="Se ha creado correctamente el registro de Captura de CFDI.";
						confirmaRegistro.isPopUp = true;
					}
					else if(rutaPDF.text.length > 0 && tipoRegistro.text=="2")
					{
						factura.visible=true;	
						//leyendaRegistro.text="Se ha creado correctamente el CFDI.";
					}
					correoVPara.setFocus();
				//}
			}
			
			private function cargaDatos():void
			{
				if(parseInt(validaExisteClientes.text) > 0)
				{
					Send(1287);
				}
				else
				{
					Terminar.enabled = false;
					Alert.okLabel = "Aceptar";
					Alert.show("Para poder generar un CFDI es necesario tener al menos un cliente configurado.", "Mensaje FacturaXion",Alert.OK,null, null, iconDel);
				}
			}
			
			private function muestraValIdConFactDetDesc():void
			{
				if (GWV_FECamposValores.selectedIndex > -1)
				{
					idConFactDetDesc.text = GWV_FECamposValores.selectedItem["0"].toString();
					LBLDescripcion.text = '*' + GWV_FECamposValores.selectedItem["1"].toString();
				}
			}
			
			private function muestraTTWcambiaValor():void
			{
				Send(522); //Trae valor
				TTWvalores.enabled = false;
				TTWcambiaValor.visible = true;	
			}
			
			private function actualizaValor():void
			{
				Send(524); //Actualiza el Valor del Campo
				Send(523); //Actualiza Data Grid
				valor.text = "";
				TTWvalores.enabled = true;
				TTWcambiaValor.visible = false;	
			}
			
			private function cargaPantallaAddenda():void
			{
				addendaLoader.addEventListener(Event.COMPLETE,controlPantallaAddenda);
				if(addendaComplemento==2)
				{
					if(usaDonatarias.selected==true)
					{
						addendaLoader.source="complementoDonatarias10.swf";	
					}
					else if(usaImpuestosLocales.selected==true)
					{
						addendaLoader.source="complementoImpuestosLocales10.swf";
					}
					cargaAddenda.enabled=false;
				}
				else if (listadoAddendasReceptor.selectedIndex>-1)
				{
					addendaLoader.source=listadoAddendasReceptor.selectedItem[2].toString();
					cargaAddenda.enabled=false;
					listadoAddendasReceptor.enabled=false;
				}
				else
				{
					Alert.okLabel="Aceptar";
					Alert.show("Seleccione por favor la Addenda a utilizar.","Aviso",Alert.OK,null,null, iconAlert);
				}
			}
			
			private function controlPantallaAddenda(loaderEvent:Event):void
			{
				loadedASM= SystemManager(addendaLoader.content);
				loadedASM.addEventListener(Event.COMPLETE,recogeAddenda);
				loadedASM.addEventListener(mx.events.FlexEvent.APPLICATION_COMPLETE,datosDeEnvio,false,0,false);
			}
			
			private function recogeAddenda(readyAddenda:Event):void
			{
				addendaContenido.text=loadedASM.application["addendaValor"].toString();
				if (listadoAddendasReceptor.selectedIndex!=-1)
				{
					idAddenda.text=listadoAddendasReceptor.selectedItem[0].toString();
					definidoEn.text=(listadoAddendasReceptor.selectedItem[7].toString().length>0?listadoAddendasReceptor.selectedItem[7].toString():"X");
					nameSpace.text=listadoAddendasReceptor.selectedItem[3].toString();
					locNameSpace.text=listadoAddendasReceptor.selectedItem[4].toString();
					nombreSchema.text=listadoAddendasReceptor.selectedItem[5].toString();
					locSchema.text=listadoAddendasReceptor.selectedItem[6].toString();
				}
				else
				{
					idAddenda.text="-1";
					definidoEn.text="";
					nameSpace.text="";
					locNameSpace.text="";
					nombreSchema.text="";
					locSchema.text="";
					if(usaImpuestosLocales.selected==true)
					{	
						var addendaXML:XML=new XML(addendaContenido.text.split("|")[1].toString());
						gbTotales[gbTotales.length-1][1]=truncaRedondeaDecimales((decTruncados.selected==true?0:1),gbTotales[gbTotales.length-1][1]-Number(addendaXML.@['totalRetencionesLocales'])+Number(addendaXML.@['totalTrasladosLocales']),int(precisionDecimalesTotales.value));
						totales.dataProvider = gbTotales;
					}
				}
				cierraAddenda(null);
			}
			
			private function datosDeEnvio(sendData:FlexEvent):void
			{
				var inputAddendas:XML=new XML("<Documento/>")
				inputAddendas.@['serie']=folio.selectedItem[1];
				inputAddendas.@['folio']=folio.selectedItem[2].toString();
				inputAddendas.@['numeroOrdenCompra']=noOrdenCompra.text;
				inputAddendas.@['tipoComprobante']=tipoCFDI.text;
				inputAddendas.@['importeTotalLetra']=importeTotalLetra.text;
				inputAddendas.@['tipoMoneda']=tipoMonedaR.text;
				inputAddendas.@['nombreMoneda']=tipoMoneda.textInput.text;
				inputAddendas.@['tipoCambio']=tasaCambioR.text;
				
				if (listadoAddendasReceptor.selectedIndex!=-1)
				{
					inputAddendas.@['definidoEn']=listadoAddendasReceptor.selectedItem[7];
					inputAddendas.@['nameSpace']=listadoAddendasReceptor.selectedItem[3];
					inputAddendas.@['locNameSpace']=listadoAddendasReceptor.selectedItem[4];
					inputAddendas.@['nombreSchema']=listadoAddendasReceptor.selectedItem[5];
					inputAddendas.@['locSchema']=listadoAddendasReceptor.selectedItem[6];
				}
				else
				{
					inputAddendas.@['definidoEn']="";
					inputAddendas.@['nameSpace']="";
					inputAddendas.@['locNameSpace']="";
					inputAddendas.@['nombreSchema']="";
					inputAddendas.@['locSchema']="";
				}
				
				var emisorInput:XML=new XML("<emisor/>");
				emisorInput.@['idEmpresa']=idEmisor.text;
				emisorInput.@['nombre']=nombreEmisor.text;
				emisorInput.@['rfc']=rfcEmisor.text;
				var emisorMatriz:XML= new XML("<emisorMatriz/>");
				emisorMatriz.@['idSucursal']=idSucursalMatriz.text;
				emisorMatriz.@['nombre']=nombreSucursalMatriz.text;
				emisorMatriz.@['calle']=calleMatriz.text;
				emisorMatriz.@['exterior']=noExtMatriz.text;
				emisorMatriz.@['interior']=noIntMatriz.text;
				emisorMatriz.@['colonia']=coloniaMatriz.text;
				emisorMatriz.@['ciudad']=ciudadMatriz.text;
				emisorMatriz.@['municipio']=municipioMatriz.text;
				emisorMatriz.@['cp']=cpMatriz.text;
				emisorMatriz.@['estado']=estadoMatriz.text;
				emisorMatriz.@['pais']=paisMatriz.text;
				emisorMatriz.@['email']=emailSucMatriz.text;
				
				var emisorEmitidoEn:XML= new XML("<emisorEmitidoEn/>");
				emisorEmitidoEn.@['idSucursal']=idSucursalEmisor.text;
				emisorEmitidoEn.@['nombre']=nombreSucursalEmitidoEn.text;
				emisorEmitidoEn.@['calle']=calleEmitidoEn.text;
				emisorEmitidoEn.@['exterior']=noExtEmitidoEn.text;
				emisorEmitidoEn.@['interior']=noIntEmitidoEn.text;
				emisorEmitidoEn.@['colonia']=coloniaEmitidoEn.text;
				emisorEmitidoEn.@['ciudad']=ciudadEmitidoEn.text;
				emisorEmitidoEn.@['municipio']=municipioEmitidoEn.text;
				emisorEmitidoEn.@['cp']=cpEmitidoEn.text;
				emisorEmitidoEn.@['estado']=estadoEmitidoEn.text;
				emisorEmitidoEn.@['pais']=paisEmitidoEn.text;
				emisorEmitidoEn.@['email']=emailSucEmitidoEn.text;
				
				emisorInput.appendChild(emisorMatriz);
				emisorInput.appendChild(emisorEmitidoEn);
											
				inputAddendas.appendChild(emisorInput);
				
				var receptorInput:XML = new XML ("<receptor/>");
				var receptorDomicilio:XML= new XML("<receptorDomicilio/>");
				
				receptorInput.@['idEmpresa']=receptor.selectedItem[0].toString();
				receptorInput.@['razonSocial']=receptor.selectedItem[1];
				receptorInput.@['rfc']=receptor.selectedItem[2];
				
				receptorDomicilio.@['idSucursal']=receptor.selectedItem[13];
				receptorDomicilio.@['nombreSucursal']=receptor.selectedItem[3];
				receptorDomicilio.@['calle']=receptor.selectedItem[4];
				receptorDomicilio.@['noExt']=receptor.selectedItem[9];
				receptorDomicilio.@['noInt']=receptor.selectedItem[10];
				receptorDomicilio.@['colonia']=receptor.selectedItem[6];
				receptorDomicilio.@['cp']=receptor.selectedItem[5];
				receptorDomicilio.@['municipio']=receptor.selectedItem[8];
				receptorDomicilio.@['estado']=receptor.selectedItem[7];
				receptorDomicilio.@['pais']=receptor.selectedItem[11];
				
				receptorInput.appendChild(receptorDomicilio);
				inputAddendas.appendChild(receptorInput);
				
				//Al xml donde enviamos información de entrada le agregamos toda la información de conceptos
				var partidas:XML=new XML("<partidas/>");
				var partidaXML:XML;
				var idx1:int;
				var idx2:int;
				for (idx1=0;idx1<gb.length;idx1++)
				{
					partidaXML= new XML("<partida/>");
					idx2=0;
					partidaXML.@['numero']=idx1.toString();
					do
					{		
						partidaXML.@['dato'+idx2.toString()]=gb[idx1][idx2].toString();
						idx2++;
					}
					while(gb[idx1].hasOwnProperty([idx2]));
					partidas.appendChild(partidaXML);
				}
				inputAddendas.appendChild(partidas);
				//Ahora le agregaremos los datos de los totales
				var totales:XML = new XML("<totales/>");
				var itemTotales:XML;
				for (idx1=0;idx1<gbTotales.length;idx1++)
				{
					itemTotales= new XML("<itemTotales/>");
					idx2=0;
					itemTotales.@['numero']=idx1.toString();
					do
					{		
						itemTotales.@['dato'+idx2.toString()]=gbTotales[idx1][idx2].toString();
						idx2++;
					}
					while(gbTotales[idx1].hasOwnProperty([idx2]));
					totales.appendChild(itemTotales);
				}
				inputAddendas.appendChild(totales);
				loadedASM.application["setParametros"](inputAddendas);
				trace(inputAddendas.toXMLString());
			}
			
			private function confirmaCancelaAddenda()
			{
				//No habrá addenda
				Alert.okLabel="Si";
				Alert.show("¿Confirma que no desea agregar Addenda/Complemento a este comprobante?","Aviso",Alert.OK | Alert.CANCEL, this, cierraAddenda, iconQuestion, Alert.OK);
			}
			private function cierraAddenda(eventObj)
			{
				if (eventObj==null||eventObj.detail==Alert.OK) 
				{
					if(!(eventObj==null)&& eventObj.detail==Alert.OK)
					{
						usaAddenda.text="0";
						addendaContenido.text="";
					}
					loadedASM=null;
					addendaLoader.unloadAndStop(true);
					contenedorAddenda.visible=false;
					sendGeneraCFDI();
				}
				
				
			}
			private function validaMensaje():void
			{
				var result:Array= new Array();
				result=lowCreditos.text.split("|");
				if(result[0].toString()=="True")
				{
					Alert.show("Le informamos que actualmente cuenta usted con "+result[1].toString()+" créditos para generar CFDIs, le recomendamos ponerse en contacto con nuestra área de ventas. \nNota: En caso de que se agoten sus créditos, será migrado a una versión austera del sistema y sus diseños para impresión de CFDIs serán cambiados por el diseño incluido por defecto en el sistema.", "Mensaje FacturaXion",Alert.OK,null, null, iconAlert);
				}
			}
			private function truncaRedondeaDecimales(trnRdn:int/*0 trunca, 1 redondea*/,nmr:Number,cDec:int/*Cantidad de decimales*/):Number
			{
				
					var tmpArr:Array= new Array();
				
					tmpArr=nmr.toString().split(".",2);
					if(tmpArr.length==1)// Si es un entero
					{
						return nmr;
					}
					else if(trnRdn==0)// Si hay que truncar
					{
						tmpArr[1]=tmpArr[1].toString().substr(0,cDec);
						return Number(tmpArr[0].toString()+"."+tmpArr[1].toString());
					}
					else if(trnRdn==1)// Si hay que redondear
					{
						var residuo:int =int(tmpArr[1].toString().substr(cDec,1));
						if (residuo<5)
						{
							tmpArr[1]=tmpArr[1].toString().substr(0,cDec);
							return Number(tmpArr[0].toString()+"."+tmpArr[1].toString());
						}
						else
						{
							var rdn:Number=Math.round(nmr*Math.pow(10,cDec))/Math.pow(10,cDec);
							return rdn;
						}
					}
					return nmr;
			}
			private function setRestringeGratuito():void
			{
				if (idRol.text=="51"||idRol.text=="50"||idRol.text=="49")
				{
					guardar.enabled=false;
					generar.enabled=true;
					btnPagoParcialidades.enabled=true;
					optionsGenerar.visible=true;
					optionsGenerar.enabled=true;
					initFact.enabled=false;
					usaDonatarias.enabled=true;
					
				}
				else if(idRol.text="52")
				{
					guardar.enabled=true;
					generar.enabled=false;
					btnPagoParcialidades.enabled=false;
					optionsGenerar.visible=false;
					optionsGenerar.enabled=false;
					initFact.enabled=true;
					usaDonatarias.selected=false;
					usaDonatarias.enabled=false;
				}
				
				if (Number(idRol.text)==16 )
				{
					correoVMSG.enabled=false;
					correoVPara.enabled=false;
					correoVCC.enabled=false;
					correoVCCo.enabled=false;
				}
				else
				{
					correoVMSG.enabled=true;
					correoVPara.enabled=true;
					correoVCC.enabled=true;
					correoVCCo.enabled=true;
				}
			}
			private function opcionAddProducto()
			{
				if (Number(idRol.text)!=16)
				{
					modal.visible = true; 
					addProducto.isPopUp = true; 
					addProducto.visible = true; 
					descripcionAdd.setFocus(); 
					disableAllcontrols();
				}
					else
				{
					mensajeRol16();
				}
			}
			 private function mensajeRol16()
			 {
				 Alert.show("Esta funcionalidad sólo está disponible en la versión de prepago, para mayor información favor de contactar a nuestra área de ventas en el teléfono 01(55)1207-0708.","Mensaje FacturaXion",Alert.OK,null,null, iconAlert);
			 }
			private function activacionOtrosComplementos(afectado:String):void
			{
				if(afectado=="donat")
				{
					usaImpuestosLocales.enabled=(usaDonatarias.selected==true)?false:true;
					guardar.enabled= (usaDonatarias.selected==true)?false:true;
				}
				else if(afectado=="implocal")
				{
					usaDonatarias.enabled=(usaImpuestosLocales.selected==true)?false:true;
				}
			}
			
			private function formateaPrecio()
			{
				precio.text=numFtr.format(truncaRedondeaDecimales(decTruncados.selected==true?0:1,Number(precio.text),precisionDecimales.value));
				precioPesos.text=numFtr.format(truncaRedondeaDecimales(decTruncados.selected==true?0:1,Number(precio.text)* Number(tipoCambioProducto.text),precisionDecimales.value));
				precioMonedaDestino.text=numFtr.format(truncaRedondeaDecimales(decTruncados.selected==true?0:1,Number(precioPesos.text)/Number(tasaCambio.text),precisionDecimales.value));
				if(Number(precio.text)>0)
				{
					precio.editable=false;
					tipoCambioProducto.editable=false;
				}
				else
				{
					precio.editable=true;
					tipoCambioProducto.editable=true;
					
				}
			}
			
			private function agregarElementoAduana()
			{
				if(noPedimento.text.length==0)
				{
					Alert.okLabel="Aceptar";
					Alert.show("Debe capturar el número de pedimento.","Aviso",Alert.OK,null,null, iconAlert);
					return;
				}
				if(aduana.text.length==0)
				{
					Alert.okLabel="Aceptar";
					Alert.show("Debe capturar el nombre de la aduana.","Aviso",Alert.OK,null,null, iconAlert);
					return;
				}
				if(fechaPedimento.text=="")
				{
					Alert.okLabel="Aceptar";
					Alert.show("Debe capturar la fecha de pedimento.","Aviso",Alert.OK,null,null, iconAlert);
					return;
				}
				var arrayDetalleAduana:ArrayCollection=new ArrayCollection();
				if(detalleAduana.dataProvider!=null)
				{
					arrayDetalleAduana= new ArrayCollection(ArrayUtil.toArray(detalleAduana.dataProvider.source));
				}
				arrayDetalleAduana.addItem({0:noPedimento.text,1:aduana.text,2:fechaPedimento.text});
				detalleAduana.dataProvider=arrayDetalleAduana;
				noPedimento.text="";
				aduana.text="";
			}
			
			private function quitarElementoAduana()
			{
				if(detalleAduana.selectedIndex<0)
				{
					Alert.okLabel="Aceptar";
					Alert.show("Debe seleccionar el elemento a eliminar.","Aviso",Alert.OK,null,null,iconAlert);
					return;
				}
				var arrayDetalleAduana:ArrayCollection=new ArrayCollection();
				if(detalleAduana.dataProvider!=null)
				{
					arrayDetalleAduana= new ArrayCollection(ArrayUtil.toArray(detalleAduana.dataProvider.source));
				}
				arrayDetalleAduana.removeItemAt(detalleAduana.selectedIndex);
				detalleAduana.dataProvider=arrayDetalleAduana;
			}
			
			private function reintentar()
			{
				if(apartaFolio.text=="1")
				{
					Alert.okLabel="Si";
					Alert.cancelLabel="No";
					Alert.show("El folio que se intentó asignar al CFDI se encuentra ocupado. ¿Desea intentar nuevamente la generación?\n Nota: En caso de que este problema persista contacte por favor a nuestra Mesa de Servicio.","Mensaje FacturaXion",Alert.OK | Alert.CANCEL, this, confirmaReintento, iconQuestion, Alert.OK);
				}
			}
			
			private function confirmaReintento(eventObj:CloseEvent):void
			{
				if (eventObj.detail==Alert.OK) 
				{
					apartaFolio.text="0";
					sendGeneraCFDI();
				}
			}
			
			private function validaSeleccionCFDI():void
			{
				if(!(dgCFDIsEmitidos.selectedIndex<0))
				{	serieCFDIOrig.text=dgCFDIsEmitidos.selectedItem[0].toString();
					fechaCFDIOrig.selectedDate = parseXsDate(dgCFDIsEmitidos.selectedItem[3].toString());
					uuidCFDIOrig.text=dgCFDIsEmitidos.selectedItem[2].toString();
					totalCFDIOrig.text=dgCFDIsEmitidos.selectedItem[4].toString();
					twComprobanteOriginalConsulta.visible=false;
				}
				else
				{
					Alert.okLabel="Aceptar";
					Alert.show("No se ha seleccionado un comprobante para tomar sus datos.","Aviso",Alert.OK,null,null,iconAlert);
				}
			}
			
			private function onButton(btn:BorderContainer):void
			{
				btn.setStyle("borderColor",0xDDA138);
				btn.setStyle("backgroundColor",0xFDD73F);										
			}
			
			private function offButton(btn:BorderContainer):void
			{
				btn.setStyle("borderColor",0xF1F1F1);
				btn.setStyle("backgroundColor",0xF1F1F1);
			}
			
			private function validaContinuar()
			{
				if(preCFDIsCapts.selectedIndex>-1)
				{
					receptor.visible=true;
					receptorAC.visible=false;
					initFact.visible=true;
					initFact.enabled=true;
					optionsGenerar.visible=false;
					Send(1239);
				}
				else
				{
					Alert.okLabel="Aceptar";
					Alert.show("Debe seleccionar el elemento a Procesar.","Aviso",Alert.OK,null,null,iconAlert);
					return;
				}
			}
			
			private function rellenaTipoCFDI():void
			{
				if(cTipoCFDI.dataProvider != null && idTipoCFDIR.text.length>0)
				{
					var tmpTiposCFDI:ArrayCollection = new ArrayCollection();
					tmpTiposCFDI = new ArrayCollection(ArrayUtil.toArray(cTipoCFDI.dataProvider));
					for(var idxTiposCFDI:int=0; idxTiposCFDI<tmpTiposCFDI[0].length; idxTiposCFDI++)
					{
						if(tmpTiposCFDI[0][idxTiposCFDI][0].toString()==idTipoCFDIR.text)
						{
							cTipoCFDI.selectedIndex=idxTiposCFDI;
							setTipoCFDI();
						}
					}
				}
			}
			
			private function rellenaTipoMoneda():void
			{
				if(tipoMoneda.dataProvider!=null && idMonedaR.text.length>0)
				{
					var tmpTiposMonedas:ArrayCollection=new ArrayCollection();
					tmpTiposMonedas=new ArrayCollection(ArrayUtil.toArray(tipoMoneda.dataProvider));
					for(var idxTiposMoneda:int=0; idxTiposMoneda<tmpTiposMonedas[0].length; idxTiposMoneda++)
					{
						if(tmpTiposMonedas[0][idxTiposMoneda][0].toString()==idMonedaR.text)
						{
							tipoMoneda.selectedIndex=idxTiposMoneda;
							if(tipoMoneda.selectedItem[1].toString()=="DOLARES")
							{
								setTasa();
							}
						}
					}
				}
			}
			
			private function rellenaFolio():void
			{
				if(folio.dataProvider!=null && idFolioR.text.length>0)
				{
					var tmpSeries:ArrayCollection=new ArrayCollection();
					tmpSeries=new ArrayCollection(ArrayUtil.toArray(folio.dataProvider));
					for(var idxSerie:int=0; idxSerie<tmpSeries[0].length; idxSerie++)
					{
						if(tmpSeries[0][idxSerie][0].toString()==idFolioR.text)
						{
							folio.selectedIndex=idxSerie;
						}
					}
				}
			}
			
			private function rellenaReceptor():void
			{
				if(receptor.dataProvider!=null && idSucursalReceptorR.text.length>0)
				{
					var tmpReceptores:ArrayCollection=new ArrayCollection();
					tmpReceptores=new ArrayCollection(ArrayUtil.toArray(receptor.dataProvider));
					for(var idxReceptor:int=0; idxReceptor<tmpReceptores[0].length; idxReceptor++)
					{
						if(tmpReceptores[0][idxReceptor][13].toString()==idSucursalReceptorR.text)
						{
							receptor.selectedIndex=idxReceptor;
							seleccionarReceptor();
						}
					}
				}
			}
			
			private function setOperDecimales():void
			{
				if(decimalesR.text=="T")
				{
					decTruncados.selected=true;
				}
				else if (decimalesR.text=="R")
				{
					decRedondeados.selected=true;
				}
			}
			
			private function setPrecisionDecimales():void
			{
				if(precisionDecimalesR.text.length>0)
				{
					precisionDecimales.value=int(precisionDecimalesR.text);
				}
			}
			
			private function setPrecisionDecimalesTotales():void
			{
				if(precisionDecimalesTotalesR.text.length>0)
				{
					precisionDecimalesTotales.value=int(precisionDecimalesTotalesR.text);
				}
			}
			
			private function validaEmitida():void
			{
				//guardar.enabled=true;
				//generar.enabled=true;
				if (emitida.text=="False")
				{
					guardar.enabled=false;
					generar.enabled=true;
					btnPagoParcialidades.enabled=true;
				}
				
				
			}
			
			private function parseosConceptos():void
			{
				//if(conceptosTmp.dataProvider!=null && conceptosTmp.dataProvider.source.length!=0)
				//{
				//	if( flgParseaConceptos==true)
				//	{
						gb=new ArrayCollection(ArrayUtil.toArray(conceptosTmp.dataProvider.source));
						/*for(var idxConceptos:int=0;idxConceptos<gb.length;idxConceptos++)
						{
							gb[idxConceptos][1]=Number(gb[idxConceptos][1]);
							gb[idxConceptos][15]=Number(gb[idxConceptos][15]);
							gb[idxConceptos][16]=Number(gb[idxConceptos][16]);
						}*/
						var newGb:ArrayCollection=new ArrayCollection();
						if(conceptosTmp.dataProvider != null)
						{
							gb = new ArrayCollection(ArrayUtil.toArray(conceptosTmp.dataProvider.source));
						}
						if(conceptos.dataProvider != null)
						{
							newGb = new ArrayCollection(ArrayUtil.toArray(conceptos.dataProvider.source));
						}
						for(var idxConceptos:int=0;idxConceptos<gb.length;idxConceptos++)
						{
							newGb.addItem({
								0:gb[idxConceptos][0].toString(),
								1:Number(gb[idxConceptos][1]),
								2:gb[idxConceptos][2].toString(),
								3:gb[idxConceptos][3].toString(),
								4:gb[idxConceptos][4].toString(),
								5:gb[idxConceptos][5].toString(),
								6:gb[idxConceptos][6].toString(),
								7:gb[idxConceptos][7].toString(),
								8:gb[idxConceptos][8].toString(),
								9:gb[idxConceptos][9].toString(),
								10:gb[idxConceptos][10].toString(),
								11:gb[idxConceptos][11].toString(),
								12:gb[idxConceptos][12].toString(),
								13:gb[idxConceptos][13].toString(),
								14:gb[idxConceptos][14].toString(),
								15:Number(gb[idxConceptos][15]),
								16:Number(gb[idxConceptos][16]),
								17:gb[idxConceptos][17].toString(),
								18:gb[idxConceptos][18].toString()
							});
						}
						flgParseaConceptos=false;
						//conceptos.dataProvider=null;
						//conceptos.initialize();
						conceptos.dataProvider=newGb;
				//	}
				//	else
				//	{
				//		flgParseaConceptos=true;
				//	}
				//}
				
			}
			
			private function parseosTotales():void
			{
				if(totalesTmp.dataProvider!=null && totalesTmp.dataProvider.source.length!=0)
				{
					if( flgParseaTots==true)
					{
						gbTotales=new ArrayCollection(ArrayUtil.toArray(totalesTmp.dataProvider.source));
						var newGbTotales:ArrayCollection=new ArrayCollection();
						for(var idxTotales:int=0;idxTotales<gbTotales.length;idxTotales++)
						{
							var ivaIeps:Boolean;
							if(gbTotales[idxTotales].hasOwnProperty([6]))
							{
								//var ivaIeps:String= trim(newGbTotales[idxTotales][6].toString().toLowerCase());
								if(ivaIeps=="true")
								{
									ivaIeps=true;
								}
								else if(ivaIeps=="false")
								{
									ivaIeps=false;
								}
							}
							newGbTotales.addItem({
								0:gbTotales[idxTotales][0].toString(),//v
								1:Number(gbTotales[idxTotales][1]),//n
								2:gbTotales[idxTotales][2].toString(),//v
								3:gbTotales[idxTotales][3].toString(),//v
								4:gbTotales[idxTotales][4].toString(),//v
								5:Number(gbTotales[idxTotales][5]),//n
								6:ivaIeps//b
							});
							
						}
						flgParseaTots=false;
						totales.dataProvider=null;
						totales.regenerateStyleCache(true);
						totales.dataProvider=newGbTotales;
					}
					else
					{
						flgParseaTots=true;
					}
				}
				
			}
			private function trim(p_string:String):String {
				if (p_string == null) { return ''; }
				return p_string.replace(/^\s+|\s+$/g, '');
			}
			
			private function notificaSAT()
			{
				Send(594);
				if(idCfdi.text.length>0 && idPreCFDI.text.length>0)
				{
					Send(1241);
				}
			}
			private function validaEliminarPreCFDI():void
			{
				if(preCFDIsCapts.selectedIndex<0)
				{
					Alert.okLabel="Aceptar";
					Alert.show("Debe seleccionar el registro a Eliminar.","Aviso",Alert.OK,null,null,iconAlert);
					return;
				}
				else if(idPreCFDI.text!="")
				{
					Alert.okLabel="Si";
					Alert.show("¿Confirma que desea eliminar este registro?","Confirmación",Alert.OK | Alert.CANCEL, this, validaConfirmaEliminarPreCFDI, iconQuestion, Alert.OK);
				}
				
			}
			
			private function validaConfirmaEliminarPreCFDI(eventObj:CloseEvent):void
			{
				if (eventObj.detail==Alert.OK) 
				{
					Send(1263);
					if(optionsGenerar.visible==true)
					{
						Send(1238);
					}
					else
					{
						closeTWCFD();
					}
				}
			}
			
			public function seleccionaItemCboSucursales():void
			{
				if(receptorAC.selectedItem != null)
				{
					if(receptorAC.selectedItem[0] != null)
					{
						var nombre = receptorAC.selectedItem[1].toString();
						var rfc = receptorAC.selectedItem[2].toString();
					
						var cbLen:int;
						var currValue:String;
						var cbValue:String;
						cbLen = receptor.dataProvider.length;
						cbValue = receptorAC.selectedItem[0];
						
						for(var j:int=0; j<cbLen; j++){
							currValue = receptor.dataProvider[j][0];
							if(currValue == cbValue){
								receptor.selectedIndex = j;
								break;
							}     
						}

						seleccionarReceptor();
						
						nombreSucursalE.text=receptorAC.selectedItem[4].toString();
						calleE.text = receptorAC.selectedItem[5].toString();
						cpE.text = receptorAC.selectedItem[6].toString();
						txtColoniaE.text = receptorAC.selectedItem[7].toString(); 
						txtEstadoE.text = receptorAC.selectedItem[8].toString(); 
						txtMunicipioE.text = receptorAC.selectedItem[9].toString(); 
						numextE.text = receptorAC.selectedItem[10].toString(); 
						numintE.text = receptorAC.selectedItem[11].toString(); 
						txtPaisE.text = receptorAC.selectedItem[12].toString();
						txtCiudadE.text = receptorAC.selectedItem[13].toString(); 
						
						twInfoDireccionReceptor.visible = true;
					}
					else
					{
						receptor.selectedIndex = -1;
					}
				}	
				infoReceptorValida.text = "0";
			}
			
			private function verificaDatosReceptor():void
			{   
				/*if(nombreSucursalE.text.length==0)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("La Nombre de Sucursal es un campo obligatorio, favor de ingresarlo ", "Aviso",Alert.OK,null,null, iconAlert);
					nombreSucursalE.errorString = "La Sucursal es un campo obligatorio";
					return;
				}*/
				
				if(calleE.text.length == 0)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("La Calle es un campo obligatorio, favor de ingresarlo ", "Aviso",Alert.OK,null,null, iconAlert);
					calleE.errorString = "La Calle es un campo obligatorio";
					return;
				}
				
				if(numextE.text.length == 0)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("El Número Exterior es un campo obligatorio, favor de ingresarlo ", "Aviso",Alert.OK,null,null, iconAlert);
					numextE.errorString = "El Número Exterior es un campo obligatorio";
					return;
				}
				
				if(cpE.text.length == 0)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("El Código Postal es un campo obligatorio, favor de ingresarlo ","Aviso",Alert.OK,null,null, iconAlert);
					cpE.errorString = "El Código Postal es un campo obligatorio";
					return;
				}
				
				if(cpE.text.length <= 4)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("El Código Postal debe tener 5 digitos, favor de verificar ","Aviso",Alert.OK,null,null, iconAlert);
					cpE.errorString = "El Código Postal debe tener 5 digitos";
					return;
				}
				
				if(txtEstadoE.text.length == 0)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("El campo Estado es obligatorio, favor de ingresarlo ","Aviso",Alert.OK,null,null, iconAlert);
					txtEstadoE.errorString = "El campo Estado es obligatorio";
					return;
				}
				
				if(txtCiudadE.text.length == 0)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("El campo Ciudad es obligatorio, favor de ingresarlo ", "Aviso",Alert.OK,null,null, iconAlert);
					txtCiudadE.errorString = "El campo Ciudad es obligatorio";
					return;
				}
				
				if(txtMunicipioE.text.length == 0)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("El campo Delegación / Municipio es obligatorio, favor de ingresarlo ", "Aviso",Alert.OK,null,null, iconAlert);
					txtMunicipioE.errorString = "El campo Delegación / Municipio es obligatorio";
					return;
					
				}
				
				if(txtColoniaE.text.length == 0)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("El campo Colonia es obligatorio, favor de ingresarlo ", "Aviso",Alert.OK,null,null, iconAlert);
					txtColoniaE.errorString = "El campo Colonia es obligatorio";
					return;
				}
				
				if(txtPaisE.text.length == 0)
				{
					Alert.okLabel = "Aceptar";
					Alert.show("El campo País es obligatorio, favor de ingresarlo ", "Aviso",Alert.OK,null,null, iconAlert);
					txtPaisE.errorString = "El campo País es obligatorio";
					return;
				}
				
				infoReceptorValida.text = "1";
				twInfoDireccionReceptor.visible = false;
				
			}
			
			private function mostrarPreciosExtranjero():void
			{
				if(idSucursalEmisor.text=="89998")
				{
					lblPrecioPesos.visible=true;
					lblTipoCambioProducto.visible=true;
					lblPrecioDestino.visible=true;
					tipoCambioProducto.visible=true;
					precioPesos.visible=true;
					precioMonedaDestino.visible=true;
				}
				else
				{
					lblPrecioPesos.visible=false;
					lblTipoCambioProducto.visible=false;
					lblPrecioDestino.visible=false;
					tipoCambioProducto.visible=false;
					precioPesos.visible=false;
					precioMonedaDestino.visible=false;
				}
			}
			
			private function parseXsDate(xsDateTime:String):Date
			{
				var dateTime:Array=xsDateTime.split("T");
				
				var xsDate:Array=dateTime[0].toString().split("-");
				var xsTime:Array=dateTime[1].toString().split(":");
				
				var xsYear:int=int(xsDate[0]);
				var xsMonth:int=int(xsDate[1])-1;
				var xsDay:int=int(xsDate[2]);
				
				var xsHours:int=int(xsTime[0]);
				var xsMinutes:int=int(xsTime[1]);
				var xsSeconds:int=int(xsTime[2]);
				
				return new Date(xsYear,xsMonth,xsDay,xsHours,xsMinutes,xsSeconds);
			}
			
			private function validaFolio():void
			{
				if(uuidCFDIOrig.text.length>0)
				{
					formaPago.text="Pago en parcialidades";
					guardar.enabled= false;
				}
				else
				{
					formaPago.text="Pago en una sola exhibición";
					guardar.enabled= true;
				}
			}
			private function setMetodoPago():void
			{
				metodoPago.text=cbMetodoPago.selectedItem[1].toString();
			}
			private function rellenaCbMetodoPago():void
			{
				if(metodoPago.text!="")
				{
					for(var idxMP:int=0; idxMP<cbMetodoPago.dataProvider.length; idxMP++)
					{
						if(cbMetodoPago.dataProvider[idxMP][1].toString()==metodoPago.text)
						{
							cbMetodoPago.selectedIndex=idxMP;
						}
					}
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:Sequence id="glowIcon" repeatCount="100">
			<mx:Glow duration="1000" alphaFrom="0.1" alphaTo="0.9" blurXFrom="0.0" blurXTo="6.0" blurYFrom="0.0" blurYTo="6.0" color="#FFFF00" /> 	
			<mx:Glow duration="1000" alphaFrom="0.9" alphaTo="0.1" blurXFrom="6.0" blurXTo="0.0" blurYFrom="6.0" blurYTo="0.0" color="#FFFF00" /> 	
		</mx:Sequence>
		
		<mx:CurrencyValidator source="{cant}" property="text" decimalPointCountError="El punto decimal sólo se puede agregar una vez."  requiredFieldError="Este campo es requerido." precision="4" invalidCharError="La cantidad contiene caracteres inválidos" maxValue="999999999"  allowNegative="false" thousandsSeparator="," exceedsMaxError="El valor debe de ser menor a 999,999,999.99" lowerThanMinError="El valor debe de ser mayor a 0" precisionError="La cantidad debe de ser numérica con cuatro posiciones decimales." valid="cantValid.text = '0';" invalid="cantValid.text = '1'" trigger="{cant}" triggerEvent="focusOut"/>
		<mx:CurrencyValidator id="validadorPrecio" source="{precio}" property="text" decimalPointCountError="El punto decimal sólo se puede agregar una vez." requiredFieldError="Este campo es requerido." invalidCharError="El precio contiene caracteres inválidos" precision="2" maxValue="999999999" allowNegative="false" thousandsSeparator=","  exceedsMaxError="El valor debe de ser menor a 999,999,999.999999" lowerThanMinError="El valor debe de ser mayor a 0" precisionError="El precio debe de ser numérico con las posiciones decimales definidas para el combrobante." valid="precioValid.text = '0';" invalid="precioValid.text = '1'" trigger="{precio}" triggerEvent="focusOut"/>
		<mx:CurrencyValidator id="validadorPrecioUnitario" source="{precioUnitarioAdd}" decimalPointCountError="El punto decimal sólo se puede agregar una vez." requiredFieldError="Este campo es requerido." invalidCharError="El precio contiene caracteres inválidos" property="text" maxValue="999999999" thousandsSeparator="," exceedsMaxError="El valor debe de ser menor a 999,999,999.999999" lowerThanMinError="El valor debe de ser mayor a 0" allowNegative="false"  precision="6" precisionError="El precio debe de ser numérico con las posiciones decimales definidas para el combrobante." valid="precioAddValid.text = '0';" invalid="precioAddValid.text = '1'" trigger="{precioUnitarioAdd}" triggerEvent="focusOut"/>
		<mx:CurrencyValidator source="{tasaCambio}" property="text" decimalPointCountError="El punto decimal sólo se puede agregar una vez."  requiredFieldError="Este campo es requerido." precision="6" invalidCharError="La cantidad contiene caracteres inválidos" maxValue="999999999"  allowNegative="false" thousandsSeparator="," exceedsMaxError="El valor debe de ser menor a 999,999,999.999999" lowerThanMinError="El valor debe de ser mayor a 0" precisionError="La cantidad debe de ser numérica con seis posiciones decimales." valid="tasaValid.text = '0';" invalid="tasaValid.text = '1'" trigger="{tasaCambio}" triggerEvent="focusOut"/>
		
		
		
	</fx:Declarations>
	
	
	<!--Campos enviados para la generación del XML y PDF-->	
	<s:TextInput id="cantValid" visible="false" x="10" y="10" width="20" height="15"/>
	<s:TextInput id="precioValid" visible="false" x="10" y="10" width="20" height="15"/>
	<s:TextInput id="precioAddValid" visible="false" x="10" y="10" width="20" height="15"/>
	<s:TextInput id="tasaValid" visible="false" x="10" y="10" width="20" height="15"/>
	<s:TextInput id="validaExisteClientes" visible="false" x="10" y="10" width="20" height="15" valueCommit="cargaDatos();"/>
	
	<!--Campos enviados para la generación del XML y PDF-->	
	<s:TextInput id="idRol" visible="false" x="10" y="10" width="20" height="15" valueCommit="setRestringeGratuito()"/>
	<s:TextInput id="rfcEmisor" visible="false" x="10" y="10" width="20" height="15"/>
	<s:TextInput id="nombreEmisor" x="52" y="81.8" fontSize="9"  visible="false"/>
	<s:TextInput id="idEmisor" visible="false" x="10" y="10" width="20" height="15"/>
	<s:TextInput id="idSucursalEmisor" visible="false" x="10" y="10" width="20" height="15" valueCommit="mostrarPreciosExtranjero();"/>
	
	<!--Campos que tomarán valores necesarios para addendas (Domicilio de la matriz)-->
	<s:TextInput id="idSucursalMatriz" x="10" y="20" width="20" height="15" visible="false"/>
	<s:TextInput id="nombreSucursalMatriz" x="10" y="20" width="20" height="15" visible="false"/>
	<s:TextInput id="paisMatriz" x="10" y="40" width="20" height="15" visible="false"/>
	<s:TextInput id="cpMatriz" x="10" y="60" width="20" height="15" visible="false"/>
	<s:TextInput id="estadoMatriz" x="10" y="80" width="20" height="15" visible="false"/>
	<s:TextInput id="ciudadMatriz" x="10" y="100" width="20" height="15" visible="false"/>
	<s:TextInput id="municipioMatriz" x="10" y="120" width="20" height="15" visible="false"/>
	<s:TextInput id="coloniaMatriz" x="10" y="140" width="20" height="15" visible="false"/>
	<s:TextInput id="calleMatriz" x="10" y="160" width="20" height="15" visible="false"/>
	<s:TextInput id="noExtMatriz" x="10" y="180" width="20" height="15" visible="false"/>
	<s:TextInput id="noIntMatriz" x="10" y="200" width="20" height="15" visible="false"/>
	<s:TextInput id="emailSucMatriz" x="10" y="220" width="20" height="15" visible="false"/>	
	
	<!--Campos que tomarán valores necesarios para addendas (Domicilio de la sucursal de expedición)-->
	<s:TextInput id="nombreSucursalEmitidoEn" x="10" y="40" width="20" height="15" visible="false"/>
	<s:TextInput id="paisEmitidoEn" x="10" y="40" width="40" height="15" visible="false"/>
	<s:TextInput id="cpEmitidoEn" x="10" y="60" width="40" height="15" visible="false"/>
	<s:TextInput id="estadoEmitidoEn" x="10" y="80" width="40" height="15" visible="false"/>
	<s:TextInput id="ciudadEmitidoEn" x="10" y="100" width="40" height="15" visible="false"/>
	<s:TextInput id="municipioEmitidoEn" x="10" y="120" width="40" height="15" visible="false"/>
	<s:TextInput id="coloniaEmitidoEn" x="10" y="140" width="40" height="15" visible="false"/>
	<s:TextInput id="calleEmitidoEn" x="10" y="160" width="40" height="15" visible="false"/>
	<s:TextInput id="noExtEmitidoEn" x="10" y="180" width="40" height="15" visible="false"/>
	<s:TextInput id="noIntEmitidoEn" x="10" y="200" width="40" height="15" visible="false"/>
	<s:TextInput id="emailSucEmitidoEn" x="10" y="220" width="40" height="15" visible="false"/>
	<s:TextInput id="importeTotal" x="10" y="240" width="40" height="15" visible="false"/>
	<s:TextInput id="importeTotalLetra" x="10" y="240" width="40" height="15" visible="false"/>
	
	<s:TextInput id="isConfigured" visible="false" x="10" y="30" width="20" height="15"/>
	
	<s:TextInput id="rfcReceptor" visible="false" x="10" y="6" width="96" height="18"/>	
	<s:TextInput id="nombreReceptor" visible="false" x="10" y="6" width="96" height="18"/>	
	<s:TextInput id="idReceptor" visible="false" x="10" y="10" width="20" height="15"/>
	<s:TextInput id="idSucursalReceptor" visible="false" x="387" y="10" width="20" height="15" />
	
	<s:TextInput id="idSerie" visible="false" x="387" y="10" width="20" height="15" />
	<s:TextInput id="tipoMonedaR" visible="false" x="387" y="10" width="20" height="15" />
	<s:TextInput id="tasaCambioR" visible="false" x="387" y="10" width="20" height="15" />
	<s:TextInput id="metodoPagoR" visible="false" x="387" y="10" width="20" height="15" />
	<s:TextInput id="noOrdenCompraR" visible="false" x="387" y="10" width="20" height="15" />
	<!--<s:TextInput id="tipoCFDI" visible="false" x="387" y="10" width="20" height="15" text="ingreso"/>-->
	<s:TextInput id="tipoCFDI" visible="true" x="387" y="10" width="20" height="15"/>
	<s:TextInput id="procedencia" visible="false" x="387" y="10" width="20" height="15" text="1"/>
	<s:TextInput id="tipoComprobante" visible="true" x="10" y="10" width="20" height="15" />
	<!--<s:TextInput id="tipoComprobante" visible="false" x="10" y="10" width="20" height="15" text="1"/>-->
	
	<!--Respuesta sobre el aparta folio-->
	<s:TextInput id="apartaFolio" visible="false" x="10" y="450" width="30" height="15" valueCommit="reintentar();" />
	
	<s:TextInput id="RAND" visible="false" x="387" y="10" width="20" height="15" valueCommit="seleccionarReceptor();" />
	
	<s:TextInput id="acProductoPasoText" visible="false" x="340" y="10" width="20" height="15" valueCommit="fillControls();"/>
	
	
	<s:Panel width="100%" height="100%" title="CFDI Simple"  id="wGFE" color="#282323" x="1" y="1">
		<s:TextInput x="129" y="155.5" width="100" restrict="0-9." id="cant" tabIndex="7" maxChars="16" height="24" text="1"/>
		<s:TextInput x="241" y="156.5" width="100" restrict="0-9." id="precio" tabIndex="8" maxChars="16" height="22" valueCommit="formateaPrecio();" toolTip="Precio Unitario del producto en su moneda asignada"/>
		<s:NumericStepper x="352" y="153.5" id="descuento" minimum="0" maximum="100" stepSize=".01"  tabIndex="9" width="100" height="24" />
		<s:ComboBox x="465" y="153.5" width="232" id="impuesto" labelField="1" tabIndex="10" height="24"></s:ComboBox>
		<s:ComboBox x="20" y="156.5" width="97" id="um" labelField="1" tabIndex="6" height="24"></s:ComboBox>
		<s:TextInput x="19" y="162" width="18" id="productoEnCatalogo" text="N" editable="false" visible="false" enabled="false" height="23"/>
		<s:TextInput x="252" y="205.5" width="113" restrict="0-9." id="precioMonedaDestino" tabIndex="8" maxChars="16" height="22" editable="false" enabled="true" textAlign="right" toolTip="Precio Unitario del producto en la moneda en que se expide el CFDI"/>
		<s:TextInput id="tipoCambioProducto" x="20" y="207" width="113" visible="true" editable="false" enabled="true" valueCommit="formateaPrecio();"  textAlign="right" toolTip="Tipo de Cambio de la moneda asignada"/>
		<s:TextInput x="143" y="205.5" width="100" restrict="0-9." id="precioPesos" tabIndex="8" maxChars="16" height="22" editable="false" enabled="true" textAlign="right" toolTip="Precio Unitario del producto en Pesos"/>
		<s:Label x="19" y="69" text="Concepto"/>
		<s:Label x="21" y="503" text="Observaciones"/>
		<s:Label x="130" y="142" text="Cantidad"/>
		<s:Label x="20" y="143" text="Unidad de Medida"/>
		<s:Label x="240" y="142.5" text="Precio Unitario"/>		
		<s:Label x="144" y="192.5" text="Precio En Pesos" id="lblPrecioPesos"/>
		<s:Label x="352" y="138.5" text="% Desc."/>
		<s:Label x="463" y="137.5" text="Impuesto"/>
		<s:Label x="251" y="192.5" text="Precio Mda. CFDI" id="lblPrecioDestino"/>
		<s:Label x="22" y="192.5" text="Tipo Cambio" id="lblTipoCambioProducto"/>
		
		
		<mx:Image source="newIcons/interrogacion.png" click="ayuda();" creationCompleteEffect="{glowIcon}" y="-30" right="30"/>
		
		<s:Label x="516" y="356" text="0.00" width="101" textAlign="right" fontWeight="normal" id="tST" visible="false"/>
		<s:Label x="528" y="372.95" text="0.00" width="89" textAlign="right" fontWeight="normal" id="tDesc" visible="false"/>
		<s:Label x="516" y="393" text="0.00" width="100" textAlign="right" fontWeight="normal" id="tIVA" visible="false"/>
		<s:Label x="516" y="412" text="0.00" width="100" textAlign="right" fontWeight="normal" id="tRet" visible="false"/>
		<s:Label x="505" y="432" text="0.00" width="111" textAlign="right" fontWeight="bold" id="tNeto" visible="false"/>
		<s:TextArea x="20" y="95" width="678" height="31.5" id="concepto" maxChars="2500" tabIndex="100" visible="false"/>
		
		<components:AutoComplete id="autocompleteProductosText" tabIndex="4" dataProvider="{ acACProductos }" change="verItemSelect();" width="789" allowMultipleSelection="false" allowNewValues="true" allowEditingNewValues="true" labelField="1" dropDownLabelFunction="dropDownLabelFunction" matchType="anyPart" x="19" y="83" height="48" showRemoveIcon="true" selectedItemStyleName="none" creationComplete="autocompleteProductosText.textInput.height+=23;autocompleteProductosText.textInput.horizontalScrollPolicy=&quot;auto&quot;" />
		
		<s:TextArea x="19" y="419" width="620" height="80" id="observaciones" maxChars="2500" tabIndex="13"/>
		<mx:Button x="713" y="154.5" label="Agregar" id="agregar"  click="add()" tabIndex="11" height="24" width="100" icon="@Embed(source='newIcons/add_24.png')"/>
		<mx:Button x="708" y="84.5" id="btnAddProducto" label="Concepto" height="24" click="opcionAddProducto();" tabIndex="5" width="100" icon="@Embed(source='newIcons/add_24.png')" visible="false" enabled="false" />
		<mx:Button x="816" y="84.5" id="btnInfAduanera" label="Aduana" height="24" click="twInformacionAduanera.visible=true;" tabIndex="5" width="100" icon="@Embed(source='assets/addtContainer-24.png')"/>
		<mx:Button x="816" y="86" icon="@Embed(source='assets/edit-24.png')" click="twComprobanteOriginal.visible=true;" height="24" width="101" tabIndex="9" id="btnPagoParcialidades" toolTip="CFDI Original en caso de Pago en Parcialidades" label="Original" visible="false" enabled="false"/>
		
		<mx:DataGrid x="19" y="243" width="900" height="24" id="conHead" editable="false" resizableColumns="true" sortableColumns="false">
			<mx:columns>
				<mx:DataGridColumn headerText="Cantidad" width="60"  dataField="0"/>
				<mx:DataGridColumn headerText="Concepto"  dataField="1" width="400" />
				<mx:DataGridColumn headerText="Precio Unitario" width="120"  dataField="2" textAlign="right"/>
				<mx:DataGridColumn headerText="Con Descuento" width="120"  dataField="2" textAlign="right"/>
				<mx:DataGridColumn headerText="Importe" width="120" dataField="3" textAlign="right"/>
				<mx:DataGridColumn headerText="*" width="25"  dataField="0"/>
			</mx:columns>
		</mx:DataGrid>
		
		<mx:DataGrid x="19" y="266" width="900"  variableRowHeight="true" height="150" id="conceptos" editable="false" showHeaders="false" wordWrap="true" >
			<mx:columns>					
				<mx:DataGridColumn headerText="Concepto" dataField="0" itemRenderer="conceptosRendererSEDENA" />		
			</mx:columns>
		</mx:DataGrid>
		<mx:DataGrid x="19" y="216" width="278" variableRowHeight="true" height="150" id="conceptosTmp" editable="false" showHeaders="false" wordWrap="true" valueCommit="parseosConceptos();" visible="false">
			<mx:columns>
				<mx:DataGridColumn headerText="Column 1" dataField="0" paddingRight="5" textAlign="right"/>	
			</mx:columns>
		</mx:DataGrid>
		
		<mx:DataGrid x="641" y="419" width="278" showHeaders="false" height="80" id="totales" creationComplete="addTotales();" fontWeight="bold" textAlign="right" resizableColumns="false" >
			<mx:columns>
				<mx:DataGridColumn headerText="Column 1" dataField="2" paddingRight="5" textAlign="right"/>
				<mx:DataGridColumn headerText="Column 2" width="120" dataField="3" paddingRight="5" textAlign="right"/>					
			</mx:columns>
		</mx:DataGrid>
		<mx:DataGrid x="641" y="369" width="278" showHeaders="false" height="80" id="totalesTmp" fontWeight="bold" textAlign="right" resizableColumns="false" valueCommit="parseosTotales();" visible="false" editable="false" enabled="false">
			<mx:columns>
				<mx:DataGridColumn headerText="Column 1" dataField="2" paddingRight="5" textAlign="right"/>
				<mx:DataGridColumn headerText="Column 2" width="120" dataField="3" paddingRight="5" textAlign="right"/>					
			</mx:columns>
		</mx:DataGrid>
		<mx:Button x="906" y="242" label="Generar Documento" icon="@Embed(source='assets/print.png')" click="generarDocumento();" visible="false" height="32"/>
		<mx:Button x="709" y="502" label="Guardar" click="operacion=1; validaGenerarFactura();" width="100" height="24" icon="@Embed(source='assets/accept-icon_24.png')" tabIndex="14" id="guardar"/>
		
		<!---->
		<s:TextInput x="79" y="4" id="searchCliente" 
					 valueCommit="if(searchCliente.text.length > 2){Send(639);}" 
					 width="140" maxChars="13" restrict="A-Za-z0-9ñÑ&amp;"
					 typographicCase="uppercase" height="24" visible="false"/>
		
		<s:ComboBox x="21" y="33" id="receptor" width="424" height="24" itemRenderer="personaRender" change="seleccionarReceptor();" labelField="11" tabIndex="1" visible="false"/>
		
		<components:AutoComplete id="receptorAC" tabIndex="4" x="21" y="33" height="24" width="424" allowMultipleSelection="false" allowNewValues="false" allowEditingNewValues="false" labelField="descripcion" matchType="anyPart" selectedItemStyleName="none" showRemoveIcon="true" change="seleccionaItemCboSucursales()" />
		
		
		<!--<s:ComboBox x="21" y="33" id="receptor" width="424" height="24" itemRenderer="personaRender" 
					change="seleccionarReceptor();" labelField="11" tabIndex="1" 
					keyDown="searchCliente.text = receptor.textInput.text;" 
					toolTip="Si su Cliente no se encuentra en esta lista, puede buscarlo tecleando parte del Nombre o RFC"/>-->
		
		<!--<s:ComboBox x="21" y="33" id="receptor" width="402" height="24" itemRenderer="personaRender" 
					change="seleccionarReceptor();" labelField="11" tabIndex="5" />-->
		<!---->		
		
		<s:Label x="21" y="18" text="Receptor"/>
		
		<!--Campos que manipularán el rellenado-->
		
		<s:TextInput x="62" y="12" id="idFolioR" visible="false" editable="false" enabled="false" width="44" valueCommit="rellenaFolio();" />
		<s:TextInput x="157" y="12" id="emitida" visible="false" editable="false" enabled="false" width="31" valueCommit="validaEmitida();"/>
		<s:TextInput x="196" y="12" id="idSucursalReceptorR" visible="false" editable="false" enabled="false" width="35" valueCommit="rellenaReceptor();"/>
		<s:TextInput x="239" y="12" id="idTipoCFDIR" visible="false" editable="false" enabled="false" width="34" valueCommit="rellenaTipoCFDI();" />
		<s:TextInput x="281" y="12" id="decimalesR" visible="false" editable="false" enabled="false" width="31" valueCommit="setOperDecimales();"/>
		<s:TextInput x="320" y="12" id="rfcReceptorR" visible="false" editable="false" enabled="false" width="31"/>
		<s:TextInput x="350" y="12" id="precisionDecimalesR" visible="false" editable="false" enabled="false" width="31" valueCommit="setPrecisionDecimales();" />
		<s:TextInput x="350" y="12" id="precisionDecimalesTotalesR" visible="false" editable="false" enabled="false" width="31" valueCommit="setPrecisionDecimalesTotales();" />
		<s:TextInput x="114" y="12" id="idReceptorR" visible="false" editable="false" enabled="false" width="35" />
		<s:TextInput x="380" y="12" id="idMonedaR" visible="false" editable="false" enabled="false" width="35" valueCommit="rellenaTipoMoneda();" />
		
		<mx:Button x="821" y="155" label="Eliminar" click="remove();" height="24" width="100" icon="@Embed(source='newIcons/delete_24.png')" id="eliminar" tabIndex="12"/>
		
		<mx:DataGrid x="1020" y="247" id="acProductosGV" visible="false" valueCommit="loadACproductos();">
			<mx:columns>
				<mx:DataGridColumn headerText="" dataField="0"/>
				<mx:DataGridColumn headerText="" dataField="1"/>
			</mx:columns>
		</mx:DataGrid>
		
		<!--Controles a los que llega la ruta de los XML y PDF generados en el sistema-->
		<s:TextInput x="34" y="272" width="318" visible="false" id="rutaPDF" valueCommit="viewTWCFD();"/>
		<s:TextInput x="34" y="313" width="318" visible="false" id="rutaXML" />
		
		<!--Controles de Envío de correo electrónico-->
		<s:TextInput x="369" y="263" visible="false" id="correo"   valueCommit="correoVPara.text = correo.text;" />
		<s:TextInput x="369" y="294" visible="false" id="correoCC" valueCommit="correoVCC.text   = correoCC.text;" />
		<s:TextInput x="369" y="310" visible="false" id="lowCreditos" enabled="false" valueCommit="validaMensaje();"/>
		<s:TextInput x="369" y="325" visible="false" id="correoCCo" />
		<s:TextInput x="369" y="356"  visible="false" id="correoMSG" />		
		<s:TextInput x="34" y="313" width="318" visible="false" id="correoEnviado" valueCommit="validSendEmail();" />
		
		
		<s:Label x="464" y="18" text="Serie"/>
		<s:Label x="597.5" y="18" text="Fecha"/>
		<mx:DateField x="597.5" y="33" showToday="true" id="fecha" creationComplete="fecha.selectedDate = new Date();" editable="false" width="124" color="#000000" height="24" enabled="false" tabIndex="3"/>
		<s:ComboBox x="463" y="33" id="folio" width="122" labelField="2" color="#000000" height="24" tabIndex="2"></s:ComboBox>		
		
		<mx:Button x="819" y="502" label="Generar" click="operacion=0; validaGenerarFactura();" width="100" height="24" icon="@Embed(source='newIcons/accept_24.png')" tabIndex="14" id="generar"/>
		<mx:Button label="Cerrar" icon="@Embed(source='newIcons/delete_24.png')" click=" salir();" height="18" width="7" right="16" top="-25"/>
		<mx:Button x="401" y="452" label="Campos Adicionales" icon="@Embed(source='assets/2718-32.png')" click="TTWvalores.visible = true;" height="24" width="170" tabIndex="4" id="btnAdendas" visible="false"/>
		<mx:Button x="709" y="532" label="Eliminar PreCFDI" width="210" height="24" icon="@Embed(source='assets/delete-icon_24.png')" tabIndex="14" id="eliminarPreCFDI" click="validaEliminarPreCFDI();"/>
		
		<s:CheckBox x="24" y="494" label="Incluir Impuestos Locales" width="163" id="usaImpuestosLocales" enabled="false" visible="false" tabIndex="16" click="activacionOtrosComplementos(&quot;implocal&quot;);"/>
		
		<s:Panel width="100%" height="100%" visible="false" id="modal" x="1" y="-30" backgroundColor="#635E5E" alpha=".5">
		</s:Panel>
		
		<s:TitleWindow id="twInformacionAduanera" visible="false" width="492" height="258" horizontalCenter="-3" y="108" close="twInformacionAduanera.visible=false;">
			<s:Label x="21" y="14" text="No Pedimento"/>
			<s:Label x="119" y="15" text="Aduana"/>
			<s:Label x="253" y="15" text="Fecha de Pedimento"/>
			<s:TextInput x="18" y="26" width="91" height="24" id="noPedimento" tabIndex="17" maxChars="16" restrict="A-Za-z0-9.ñÑ&amp;"/>
			<s:TextInput x="118" y="26.5" width="125" height="23" id="aduana" tabIndex="18" maxChars="50" restrict="A-Za-z0-9.ñÑ&amp;"/>
			<mx:DateField x="250.5" y="27" showToday="true" id="fechaPedimento" creationComplete="fecha.selectedDate = new Date();" editable="false" width="118" color="#000000" height="24" enabled="true" tabIndex="19" formatString="YYYY-MM-DD"/>
			<mx:Button id="btnAgregarElementoAduana" width="31" height="24" icon="@Embed(source='newIcons/add_24.png')" x="381" y="27" click="agregarElementoAduana()" tabIndex="20"/>
			<mx:Button id="btnQuitarElementoAduana" width="31" height="24" icon="@Embed(source='newIcons/delete_24.png')" x="417" y="27" click="quitarElementoAduana()" tabIndex="21"/>
			<mx:DataGrid editable="true" width="430" id="detalleAduana" wordWrap="true" variableRowHeight="true" liveScrolling="true" height="115" x="19" y="59" tabChildren="true" tabIndex="22">
				<mx:columns>
					<mx:DataGridColumn textAlign="left"		headerText="No Pedimento" 		dataField="0" editable="false" width="80"/>
					<mx:DataGridColumn textAlign="left" 	headerText="Aduana" 			dataField="1" editable="false" width="80"/>
					<mx:DataGridColumn textAlign="left" 	headerText="Fecha pedimento"	dataField="2" editable="false" width="80" />
				</mx:columns>
			</mx:DataGrid>
			<mx:Button x="351" y="181" label="Terminar" icon="@Embed(source='newIcons/accept_24.png')" click="twInformacionAduanera.visible=false;" height="24" width="99" tabIndex="23"/>
		</s:TitleWindow>
		
		<s:TitleWindow id="initFact" visible="true" width="304" height="411" close="salir();" horizontalCenter="4" y="83" enabled="false">
			<s:ComboBox x="19" y="26" id="tipoMoneda" width="125" height="24" change="setTasa();" labelField="11" tabIndex="1"></s:ComboBox>
			<s:Label x="19" y="13" text="Tipo de Moneda"/>
			<s:Label x="19" y="62" text="Método de Pago"/>
			<s:Label x="156" y="13" text="Tasa de Cambio"/>
			<s:Label x="20" y="110" text="Número de órden de compra"/>
			<s:Label x="20" y="210" text="Tipo de CFDI"/>
			
			<s:TextInput x="156" y="25.5" width="125" height="23" id="tasaCambio" maxChars="2500" tabIndex="2" editable="false" text="1" />
			<s:TextInput x="20" y="123" width="260" height="23" id="noOrdenCompra" maxChars="20" tabIndex="3"/>
			
			<s:TextInput x="9" y="165" width="52" height="23" id="countCamposAdicionales" maxChars="20" visible="false"/>
			<s:TextInput x="18" y="54" width="263" height="24" id="metodoPago" tabIndex="4" visible="false" enabled="false" valueCommit="rellenaCbMetodoPago()"/>
			<s:ComboBox x="18" y="75" width="263" height="24" id="cbMetodoPago" tabIndex="4" valueCommit="rellenaMetodosPago();" labelField="1" change="setMetodoPago();"/>
			<s:ComboBox x="20" y="224" id="cTipoCFDI" creationComplete="Send(680);" width="260" height="24" change="setTipoCFDI();" labelField="11" tabIndex="5"/>
			<s:Label x="20" y="275" text="Decimales:"/>
			<s:Label x="123" y="275" text="Precisión Conceptos:" width="59"/>
			<s:RadioButton x="24" y="289" label="Truncados" width="79" selected="true"  id="decTruncados" tabIndex="6" toolTip="Default, con esta opción los cálculos de decimales se truncarán a 2 dígitos" click="decimales.text=&quot;T&quot;;"/>
			<s:RadioButton x="24" y="309" label="Redondeados" width="89" id="decRedondeados" tabIndex="7" toolTip="Con esta opción los cálculos de los totales se dedondearán al centésimo más próximo" click="decimales.text=&quot;R&quot;;"/>
			<s:NumericStepper x="124" y="303" minimum="2" maximum="6" stepSize="1" id="precisionDecimales" tabIndex="8" width="51" textAlign="right"/>
			<!--<s:Label x="50" y="267" text="Por favor espere:" width="200" id="anuncioTimer" visible="false"  color="#1B3EC2" fontWeight="bold"/>-->
			<mx:Button x="157" y="337" label="Entrar" icon="@Embed(source='newIcons/accept_24.png')" click="entrar();" height="24" width="99" tabIndex="9" id="Terminar"/>
			<mx:Button x="48" y="338" label="Cerrar" icon="@Embed(source='newIcons/delete_24.png')" click=" salir(); initFact.visible = false; " height="24" width="100" tabIndex="100"/>
			<s:TextInput x="229" y="223" width="41" text="T" id="decimales" enabled="false" editable="false" visible="false"/>
			<s:CheckBox x="24" y="252" label="Comprobante de Donatarias" width="209" id="usaDonatarias" enabled="true" visible="true" tabIndex="15" click="activacionOtrosComplementos(&quot;donat&quot;);"/>
			<s:Label x="193" y="276" text="Precisión Totales:" width="59"/>
			<s:NumericStepper x="194" y="303" minimum="2" maximum="6" stepSize="1" id="precisionDecimalesTotales" tabIndex="8" width="51" textAlign="right"/>
			<s:TextInput x="18" y="175" width="263" height="24" id="cuentaPago" tabIndex="4"/>
			<s:Label x="20" y="159" text="Número de Cuenta Pago:"/>
		</s:TitleWindow>
		
		<s:TitleWindow height="85%" id="contenedorAddenda" enabled="true" title="Inserción de Addendas/Complementos" verticalCenter="-165" visible="false" close="confirmaCancelaAddenda();" width="85%" horizontalCenter="0">
			<s:ComboBox x="20" y="26" id="listadoAddendasReceptor"/>
			<mx:Button x="180" y="26" id="cargaAddenda" label="Capturar" icon="@Embed(source='newIcons/accept_24.png')" height="24" width="100" click="cargaPantallaAddenda();"/>
			<mx:Button x="292" y="26" id="cancelaAddenda" label="Cancelar" icon="@Embed(source='newIcons/delete_24.png')" height="24" width="100" click="confirmaCancelaAddenda();"/>
			<s:Label x="23" y="12" text="Addenda/Complemento" width="121"/>
			<mx:SWFLoader height="473" left="20" right="23" y="61" id="addendaLoader"/>
			<s:TextInput x="440" y="32" id="usaAddenda" enabled="false" visible="false" width="30" text="0"/>
			<s:TextInput x="470" y="32" id="addendaContenido" enabled="false" visible="false" width="30"/>
			<s:TextInput x="500" y="32" id="idAddenda" width="30" enabled="false" visible="false" text="-1"/>
			<s:TextInput x="530" y="32" id="locNameSpace" width="30" enabled="false" visible="false"/>
			<s:TextInput x="560" y="32" id="locSchema" width="30" enabled="false" visible="false"/>
			<s:TextInput x="590" y="32" id="nombreSchema" width="30" enabled="false" visible="false"/>
			<s:TextInput x="620" y="32" id="definidoEn" width="30" enabled="false" visible="false"/>
			<s:TextInput x="650" y="32" id="nameSpace" width="30" enabled="false" visible="false"/>
			<s:Label x="20" y="32" text="Complemento" width="146" height="14" id="lblComplementoNombre"/>
		</s:TitleWindow>
		<s:TextInput x="726" y="33" id="cCountAddendas" visible="false" enabled="false"/>
		<s:TitleWindow id="optionsGenerar"  width="800" height="480" horizontalCenter="0" verticalCenter="-180" visible="false" close="salir()">
			<s:BorderContainer x="20" y="28" click="optionsGenerar.visible=false;idPreCFDI.text=&quot;&quot;;initFact.enabled=true;" dropShadowVisible="true" height="64"  
							   rollOver="onButton(btnNvo);" rollOut="offButton(btnNvo);"
							   cornerRadius="3" id="btnNvo"  borderVisible="false" 
							   backgroundColor="#F1F1F1" borderColor="#F1F1F1" width="100">
				<s:VGroup horizontalAlign="center" verticalAlign="middle" width="100%" height="100%">
					<s:Label text="Nuevo" color="#4C4C4C" fontWeight="bold" fontSize="12" width="78" verticalAlign="middle" textAlign="center"/>
					<mx:Image source="assets/newDocument.png" width="24" height="24"/>
				</s:VGroup>
			</s:BorderContainer>
			<s:BorderContainer x="150" y="28" click="Send(1238);" dropShadowVisible="true" height="64"  
							   rollOver="onButton(btnCapt);" rollOut="offButton(btnCapt);"
							   cornerRadius="3" id="btnCapt"  borderVisible="false" 
							   backgroundColor="#F1F1F1" borderColor="#F1F1F1" width="100">
				<s:VGroup horizontalAlign="center" verticalAlign="middle" width="100%" height="100%">
					<s:Label text="Consultar Capturados" color="#4C4C4C" fontWeight="bold" fontSize="12" width="78" verticalAlign="middle" textAlign="center"/>
					<mx:Image source="assets/filter.png" width="24" height="24"/>
				</s:VGroup>
			</s:BorderContainer>
			<s:BorderContainer x="280" y="28" click="validaEliminarPreCFDI();" dropShadowVisible="true" height="64"  
							   rollOver="onButton(btnDelete);" rollOut="offButton(btnDelete);"
							   cornerRadius="3" id="btnDelete"  borderVisible="false" 
							   backgroundColor="#F1F1F1" borderColor="#F1F1F1" width="100">
				<s:VGroup horizontalAlign="center" verticalAlign="middle" width="100%" height="100%">
					<s:Label text="Eliminar preCFDI" color="#4C4C4C" fontWeight="bold" fontSize="12" width="78" verticalAlign="middle" textAlign="center"/>
					<mx:Image source="assets/delete-icon_24.png" width="24" height="24"/>
				</s:VGroup>
			</s:BorderContainer>
			<mx:DataGrid  width="740" id="preCFDIsCapts" wordWrap="true" variableRowHeight="true" liveScrolling="true" height="300" tabChildren="true" tabIndex="22" change="idPreCFDI.text=preCFDIsCapts.selectedItem[0].toString(); continuar.visible=true;" x="16" y="100">
				<mx:columns>
					<mx:DataGridColumn textAlign="left"		headerText="idPreCFDICapt"			dataField="0" editable="false" width="30" visible="false"/>
					<mx:DataGridColumn textAlign="left"		headerText="RFC de Receptor" 		dataField="1" editable="false" width="120"/>
					<mx:DataGridColumn textAlign="left" 	headerText="Nombre de Receptor" 	dataField="2" editable="false" width="160"/>
					<mx:DataGridColumn textAlign="right"	headerText="Importe Total"			dataField="3" editable="false" width="60"/>
					<mx:DataGridColumn textAlign="left" 	headerText="Fecha de Captura"		dataField="4" editable="false" width="100"/>
					<mx:DataGridColumn textAlign="left"		headerText="Usuario que capturó"	dataField="5" editable="false" width="100"/>
					<mx:DataGridColumn textAlign="left"		headerText="Observaciones"			dataField="6" editable="false" width="200"/>
				</mx:columns>
			</mx:DataGrid>
			<mx:VRule x="135" y="28" height="73"/>
			<mx:VRule x="265" y="28" height="73"/>
			<mx:Button x="607" y="412" label="Validar/Emitir" click="validaContinuar();" width="138" height="24" icon="@Embed(source='newIcons/accept_24.png')" tabIndex="14" id="continuar" visible="false"/>
			<s:TextInput x="10" y="412" width="57" id="idPreCFDI" editable="false" visible="false" enabled="false" />
			<s:TextInput x="10" y="421" width="57" id="tipoRegistro" editable="false" visible="false" enabled="false" valueCommit="viewTWCFD();"/>
		</s:TitleWindow>
		
		
		

		
		
		
	</s:Panel>	
	
	<!--Title Window de altas de productos-->
	<s:TitleWindow id="addProducto" visible="false" width="275" height="280" close="addProducto.visible = false; modal.visible = false; enabledAllControls();" title="Agregar Producto" x="644" y="43">
		<s:TextArea x="10" y="28" width="250" id="descripcionAdd" tabIndex="4"  height="56"/>
		<s:Label x="10" y="10" text="Descripción del Concepto" width="145"/>
		<s:TextInput x="10" y="105" width="250" id="descripcionCortaAdd" tabIndex="4" height="24"/>
		<s:Label x="10" y="92" text="Descripción corta del Concepto" width="207"/>
		<s:TextInput x="10" y="197" width="125" id="precioUnitarioAdd" restrict="0-9." tabIndex="4" height="24"/>
		<s:Label x="10" y="182" text="Precio Unitario" width="164"/>
		<s:Label x="10" y="137" text="Unidad de Medida" width="207"/>
		<s:ComboBox x="10" y="150" id="umAdd" width="125" height="24" labelField="11"></s:ComboBox>
		<mx:Button x="161" y="195.95" label="Agregar" id="addProductoInDB" icon="@Embed(source='newIcons/add_24.png')" height="24" width="100" tabIndex="7" click="addProductoAndValid();"/>
	</s:TitleWindow>
	
	<!--Title Window para escupir o enviar el XML o PDF generado-->
	<s:TitleWindow id="factura" width="592" height="363" backgroundColor="#ffffff" visible="false" title="Ver o enviar CFDI." close="closeTWCFD();" horizontalCenter="-5" y="150" >
		<mx:Image x="-0.5" y="-2" id="imageMSGFact" source="newIcons/enterprises copia.png" visible="true"/>
		<s:Label x="64.5" y="24" visible="true" text="¿Desea imprimir o enviar este CFDI?"  fontSize="17" fontWeight="bold"/>		
		
		<s:TextInput x="30.5" y="80" width="250"   id="correoVPara" valueCommit="correo.text = correoVPara.text;"   change="if(correoVPara.text!=&quot;&quot;){checkMail(correoVPara);}"  height="24" toolTip="Agregue sólo una dirección de correo"/>
		<s:TextInput x="31.5" y="124" width="250"   id="correoVCC"   valueCommit="correoCC.text = correoVCC.text;"    height="24" toolTip="Agregue una o varias cuentas de correo separadas con punto y coma (;)"/>
		<s:TextInput x="31.5" y="168" width="250"   id="correoVCCo"  valueCommit="correoCCo.text = correoVCCo.text;"  height="24"  toolTip="Agregue una o varias cuentas de correo separadas con punto y coma (;)"/>
		<s:TextArea  x="297"  y="79" width="250" id="correoVMSG"  valueCommit="correoMSG.text = correoVMSG.text;" height="113"/>
		
		<s:Label x="29.5" y="67" visible="true" text="Para : "/>
		<s:Label x="299" y="66" visible="true" text="Mensaje : "/>
		<s:Label x="33.5" y="111" visible="true" text="Cc : "/>
		<s:Label x="31.5" y="155" visible="true" text="CCo : "/>
		
		<s:TextInput x="0" y="0" width="0" visible="false" enabled="false" height="0" id="idCfdi" valueCommit="tipoRegistro.text=&quot;2&quot;; notificaSAT(); "/>
		
		<mx:Button x="32" y="225" click="navegarPDF();" label="      Visualizar CFDI en PDF" height="24" fontWeight="bold"  width="250" icon="@Embed(source='assets/pdf-64X64.png')"/>
		<mx:Button x="297" y="224" click="navegarXML();" label="      Visualizar CFDI en XML" height="24" fontWeight="bold"  width="250" icon="@Embed(source='newIcons/R_64.png')"/>
		<mx:Button x="297" y="279" click="enviarFactEmail();" label="  Enviar CFDI por Correo" height="24" fontWeight="bold"  width="250" icon="@Embed(source='assets/mail-64X64.png')" id="enviaCfdiXMail"/>		
	</s:TitleWindow>
	
	<s:TitleWindow id="confirmaRegistro" visible="false" width="304" height="135" close="salir();" horizontalCenter="4" y="295" enabled="true">
		<mx:Button x="99" y="64" label="Nuevo" icon="@Embed(source='assets/add-icon_24.png')" click="closeTWCFD()" height="24" width="99" tabIndex="9" id="nuevoRegistro"/>
		<s:Label x="19" y="18" id="leyendaRegistro" text="Se ha generado el registro correctamente de Pre CFDI" width="273" height="30"/>
	</s:TitleWindow>
	
	<mx:TitleWindow id="TTWvalores" title="CAMPOS ADICIONALES" visible="false" showCloseButton="false" width="684"
					height="322" layout="absolute" borderAlpha=".95" horizontalCenter="-50" y="215" verticalCenter="-200">
		<s:VGroup width="100%" height="100%" horizontalAlign="left"  paddingRight="5" paddingLeft="5" paddingTop="5" paddingBottom="5">
			<!--<mx:Label text="El diseño de su CFDI cuenta con campos adicionales."  fontWeight="bold"/>-->
			<mx:Label text="  El diseño de su CFDI contiene Campos Adicionales.  Asigne un valor dando doble click en la Descripción de cada Campo."  fontWeight="normal" paddingTop="10"/>
			<s:HGroup width="100%" height="100%" horizontalAlign="left"  paddingRight="5" paddingLeft="5" paddingTop="5" paddingBottom="5">
				<mx:DataGrid width="100%" height="100%" verticalAlign="top" id="GWV_FECamposValores" horizontalScrollPolicy="on" verticalScrollPolicy="auto" wordWrap="true" headerStyleName="headerStyle" click="muestraValIdConFactDetDesc();" doubleClickEnabled="true" doubleClick="muestraTTWcambiaValor();">
					<mx:columns>
						<mx:DataGridColumn headerText="idConFactDetDesc"							dataField="0" paddingLeft="10" paddingRight="10" width="80" visible="false"/>
						<mx:DataGridColumn headerText="Descripción"									dataField="1" paddingLeft="10" paddingRight="10" width="200"/>
						<mx:DataGridColumn headerText="Valor"										dataField="2" paddingLeft="10" paddingRight="10" width="100"/>
					</mx:columns>
				</mx:DataGrid>
			</s:HGroup>	
			<s:HGroup width="100%" horizontalAlign="right"  paddingRight="5" paddingLeft="5" paddingTop="5" paddingBottom="5">
				<s:TextInput id="idConFactDetDesc" visible="false" width="45" x="516"/>
				<mx:Button label="Aceptar" icon="@Embed(source='newIcons/accept_24.png')" click=" TTWvalores.visible = false; modal.visible = false;" height="24" width="100" tabIndex="3" x="567"/>
			</s:HGroup>
		</s:VGroup>
	</mx:TitleWindow>
	
	<mx:TitleWindow id="TTWcambiaValor" title="Asignar Valor" visible="false" showCloseButton="true" close="TTWvalores.enabled = true;TTWcambiaValor.visible = false;"  
					layout="absolute" borderAlpha=".95" horizontalCenter="0" y="177" height="89" width="481">
		<mx:HBox width="479" height="100%" horizontalAlign="left"  paddingRight="5" paddingLeft="5" paddingTop="5" paddingBottom="5">
			<mx:Label id="LBLDescripcion" text="" fontWeight="bold"/>
			<s:TextInput id="valor" width="145"/>
			<mx:Spacer width="5"/>
			<mx:Button label="Aceptar" icon="@Embed(source='newIcons/accept_24.png')" click="actualizaValor();" height="24" width="100" tabIndex="3"/>
		</mx:HBox>
	</mx:TitleWindow> 
	
	<s:TitleWindow id="twInfoDireccionReceptor" visible="false" width="714" height="218" close="verificaDatosReceptor();" title="Domicilio Fiscal Receptor" verticalCenter="-254" horizontalCenter="-70">
		<s:Group width="100%" height="100%">
			<mx:Button label="Aceptar" icon="@Embed(source='newIcons/accept_24.png')" click="verificaDatosReceptor();" height="24" width="100" tabIndex="3" x="570" y="153"/>
			<s:Label x="16.6" y="12" text="* Nombre de Sucursal del Receptor" textAlign="right" fontWeight="bold" color="#000000" width="173"/>
			<s:Label x="20.6" y="59" text="* Calle" textAlign="right" fontWeight="bold" color="#000000"/>
			<s:Label x="231.2" y="57" text="* Número Ext" textAlign="right" fontWeight="bold" color="#000000"/>
			<s:Label x="331.2" y="57" text="Número Int" textAlign="right" color="#000000"/>
			<s:Label x="431.2" y="57" text="* Código Postal" textAlign="right" fontWeight="bold" color="#000000"/>
			<s:Label x="559.6" y="57" text="* Estado" textAlign="right" fontWeight="bold" color="#000000"/>
			<s:Label x="21.15" y="105" text="* Ciudad" textAlign="right" fontWeight="bold" color="#000000"/>
			<s:Label x="157.2" y="105" text="* Delegación/Municipio" textAlign="right" fontWeight="bold" color="#000000"/>
			<s:Label x="302" y="105" text="* Colonia" textAlign="right" fontWeight="bold" color="#000000"/>
			<s:Label x="436" y="105" text="* País" textAlign="right" fontWeight="bold" color="#000000"/>
			<s:Label x="29" y="165" text="* Todos los campos marcados con (*) son obligatorios." textAlign="right" fontWeight="bold" color="#000000"/>
			
			<s:TextInput x="20.6" y="24"  id="nombreSucursalE"  width="200.4" color="#000000" tabIndex="6" maxChars="100" focusOut="if(nombreSucursalE.text.length > 0) nombreSucursalE.errorString = ''"/>
			<s:TextInput x="428.2" y="71" id="cpE" width="123" restrict="0-9" maxChars="5" color="#000000" tabIndex="9" focusOut="if(cpE.text.length > 0) cpE.errorString = ''"/>
			<s:TextInput x="20.6" y="71"  id="calleE"  width="200.4" color="#000000" tabIndex="6" maxChars="100" focusOut="if(calleE.text.length > 0) calleE.errorString = ''"/>
			<s:TextInput x="230.2" y="71" id="numextE" width="90" color="#000000" tabIndex="7" maxChars="20" focusOut="if(numextE.text.length > 0) numextE.errorString = ''"/>
			<s:TextInput x="329.2" y="71" id="numintE" width="90" color="#000000" tabIndex="8" maxChars="20" focusOut="if(numintE.text.length > 0) numintE.errorString = ''"/>
			<s:TextInput x="559.6" y="70.5" width="125" id="txtEstadoE" visible="true" tabIndex="10" color="#000000" maxChars="50" focusOut="if(txtEstadoE.text.length > 0) txtEstadoE.errorString = ''"/>
			<s:TextInput x="21.15" y="118.5" width="125" id="txtCiudadE" visible="true" tabIndex="11" color="#000000" maxChars="100" focusOut="if(txtCiudadE.text.length > 0) txtCiudadE.errorString = ''"/>
			<s:TextInput x="157.2" y="118.5" width="132" id="txtMunicipioE" visible="true" tabIndex="12" color="#000000" maxChars="100" focusOut="if(txtMunicipioE.text.length > 0) txtMunicipioE.errorString = ''"/>
			<s:TextInput x="302" y="119" width="125" id="txtColoniaE" visible="true"  tabIndex="13"  color="#000000" maxChars="100" focusOut="if(txtColoniaE.text.length > 0) txtColoniaE.errorString = ''"/>
			<s:TextInput x="436" y="119" width="106" id="txtPaisE" visible="true"  tabIndex="13"  color="#000000" maxChars="100" focusOut="if(txtPaisE.text.length > 0) txtPaisE.errorString = ''"/>
			<s:TextInput x="436" y="126" width="19" id="infoReceptorValida" text="0" visible="false" enabled="false" editable="false" tabIndex="13"  color="#000000" maxChars="100" focusOut="if(txtPaisE.text.length > 0) txtPaisE.errorString = ''"/>			
		</s:Group>
	</s:TitleWindow>
	<mx:TitleWindow id="twComprobanteOriginal" title="Comprobante Original" visible="false" showCloseButton="true" close="twComprobanteOriginal.visible=false;"  
					layout="absolute" borderAlpha=".95" horizontalCenter="0" y="143" height="266" width="460">
		<s:Label x="9" y="34" text="Num. Folio Comprobante Original:" width="113"/>
		<s:Label x="231" y="67" text="Importe Comprobante Original:" width="113"/>
		<s:Label x="10" y="69" text="Serie Comprobante Original:" width="94"/>
		<s:Label x="10" y="132" text="Fecha Comprobante Original:" width="112"/>		
		<s:TextInput id="totalCFDIOrig" x="352" y="71" width="87" restrict="0-9." />
		<s:TextInput id="uuidCFDIOrig" x="130" y="36" width="274" valueCommit="validaFolio();" change="validaFolio()"/>
		<s:TextInput id="serieCFDIOrig" x="130" y="72" width="87"/>
		<timePicker:DateTimePicker selectedDate="{new Date()}" id="fechaCFDIOrig" minuteIncrement="1" backgroundColor="#FFFFFF" x="130" y="101"/>
		<mx:Button x="356" y="193.5" id="btnAddProducto1" label="Cerrar" height="24" click="twComprobanteOriginal.visible=false;" tabIndex="5" width="82" icon="@Embed(source='assets/accept-icon_24.png')"/>
		<mx:Button x="412" y="33.5" id="btnTwComprobanteOriginalConsulta" label="..." height="24" click="twComprobanteOriginalConsulta.visible=true;Send(1359);" tabIndex="5" width="26"/>
		<s:TextInput id="formaPago" x="130" y="8" width="308" text="Pago en una sola exhibición"/>
		<s:Label x="10" y="12" text="Forma de Pago:" width="112"/>
		
	</mx:TitleWindow>
	<mx:TitleWindow id="twComprobanteOriginalConsulta" title="Comprobante Original" visible="false" showCloseButton="true" close="twComprobanteOriginalConsulta.visible=false;"  
					layout="absolute" borderAlpha=".95" horizontalCenter="0" y="177" height="234" width="542">
		<mx:DataGrid id="dgCFDIsEmitidos" x="11" y="8" width="519" height="148">
			<mx:columns>
				<mx:DataGridColumn headerText="Serie" dataField="0" width="40"/>
				<mx:DataGridColumn headerText="Folio" dataField="1" width="40" textAlign="center"/>
				<mx:DataGridColumn headerText="UUID" dataField="2" width="200"/>
				<mx:DataGridColumn headerText="Fecha" dataField="3" width="140"/>
				<mx:DataGridColumn headerText="Monto" dataField="4" width="70" textAlign="right"/>
			</mx:columns>
		</mx:DataGrid>
		<mx:Button x="440" y="164.5" id="btnValidaSeleccionaComprobante" label="Aceptar" height="24" click="validaSeleccionCFDI();" tabIndex="5" width="90" icon="@Embed(source='assets/accept-icon_24.png')"/>
		
	</mx:TitleWindow>
</s:Application>