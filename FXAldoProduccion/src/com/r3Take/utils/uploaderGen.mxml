<?xml version="1.0" encoding="utf-8"?>

<s:Group 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:mx2="library://ns.adobe.com/flex/halo"
	xmlns:html="com.htmlFilter.*"
	xmlns:com="*"
	xmlns:local="*" 	
	xmlns:ns1="com.flashdev.file.*">
	
	<fx:Metadata>
		[Event(name="uploadComplete", type="flash.events.Event")]
		[Event(name="uploadProgress", type="flash.events.ProgressEvent")]
		[Event(name="uploadCancel", type="flash.events.Event")]
		[Event(name="uploadIOError", type="flash.events.IOErrorEvent")]
		[Event(name="uploadSecurityError", type="flash.events.SecurityErrorEvent")]		
	</fx:Metadata>	
	<fx:Script source="../../../r3Take.as" />
	
	<fx:Script>
		<![CDATA[
			import mx.controls.*;
			import mx.managers.*;
			import mx.events.*;
			import flash.events.*;
			import flash.net.*;
			
			public var _refAddFiles:FileReferenceList;	
			public var _refUploadFile:FileReference;
			public var _myFile:FileReference;				
			private var _r3FilePath:String;
			private var _r3IdRef:String;
			private var _r3DS:String;
			private var _r3SQL:String;
			private var _r3SQLArgs:String;
			private var _r3ActionOnUploadComplete:String;
			private var _r3AshxPath:String;
			private var _r3Param1:String;
			private var _r3Param2:String;
			private var _r3Param3:String;
			private var _r3Param4:String;
			private var _r3Param5:String;
			private var _r3Clase:String;
			private var _r3Metodo:String;
			
			// Set idRef
			private function getTypes():Array {
				var allTypes:Array = new Array(getCerTypeFilter());
				return allTypes;
			}
			
			private function getCerTypeFilter():FileFilter {
				return new FileFilter("Imagen de Logotipo (*.png, *.jpg)", "*.png;*.jpg");
			}
			
			[Embed(source="assets/add.png")]
			[Bindable]
			public var iconAdd:Class;
			
			//			[Embed(source="assets/view.png")]
			//			[Bindable]
			//			public var iconView:Class;
			
			// Establece la ruta del directorio dónde se guardará el archivo físicamente
			public function set r3FilePath(strFilePath:String):void {
				_r3FilePath = strFilePath;
			}
			
			// Set idRef
			public function set r3IdRef(strIdRef:String):void {
				_r3IdRef = strIdRef;
			}
			
			// Set DS
			public function set r3DS(strDS:String):void {
				_r3DS = strDS;
			}
			
			// Set SQL
			public function set r3SQL(strSQL:String):void {
				_r3SQL = strSQL;
			}
			
			// Set SQLArgs
			public function set r3SQLArgs(strSQLArgs:String):void {
				_r3SQLArgs = strSQLArgs;
			}
			
			
			// Set Action OnUploadComplete
			public function set r3ActionOnUploadComplete(strActionOnUploadComplete:String):void {
				_r3ActionOnUploadComplete = strActionOnUploadComplete;
			}
			// Set uploadUrl
			public function set r3AshxPath(strAshxPath:String):void {
				_r3AshxPath = strAshxPath;
			}
			// Set Action _r3Param1
			public function set r3Param1(strParam1:String):void {
				_r3Param1 = strParam1;
			}
			
			// Set Action _r3Param2
			public function set r3Param2(strParam2:String):void {
				_r3Param2 = strParam2;
			}
			
			
			// Set Action _r3Param3
			public function set r3Param3(strParam3:String):void {
				_r3Param3 = strParam3;
			}
			
			// Set Action _r3Param4
			public function set r3Param4(strParam4:String):void {
				_r3Param4 = strParam4;
			}
			
			
			// Set Action _r3Param5
			public function set r3Param5(strParam5:String):void {
				_r3Param5 = strParam5;
			}
			
			// Set Action _r3Clase
			public function set r3Clase(strClase:String):void {
				_r3Clase = strClase;
			}
			
			// Set Action _r3Metodo
			public function set r3Metodo(strMetodo:String):void {
				_r3Metodo = strMetodo;
			}
			
			private function setAdd(event:MouseEvent):void{
				fileName .text = "";
				btnAdd.setStyle("icon",iconAdd);
				btnAdd.toolTip = "Adjuntar Archivo"
				btnAdd.removeEventListener(MouseEvent.CLICK,addFiles);
				//btnAdd.removeEventListener(MouseEvent.CLICK,viewFiles);
				btnAdd.addEventListener(MouseEvent.CLICK,addFiles);				
				enableUI();
			}
			
			
			private function doDownload(evt:Event):void {               
				var fr:FileReference = evt.currentTarget as FileReference; 
				try {
					/* Do something */
					Alert.show(evt.toString(),evt.type.toString());             
				} catch (err:*) {
					Alert.show(evt.toString(),"Erroooooor");
				}
			}
			
			// Called to add file(s) for upload
			private function addFiles(event:MouseEvent):void {
				_refAddFiles = new FileReferenceList();
				_refAddFiles.addEventListener(Event.SELECT, onSelectFile);
				_refAddFiles.browse(getTypes());
			}
			
			// Called when a file is selected
			private function onSelectFile(event:Event):void {				
				if (_refAddFiles.fileList.length >= 1) {				
					for (var k:Number = 0; k < _refAddFiles.fileList.length; k++) {
						
						/* if(_refAddFiles.fileList[k].size < 60000)
						{ */
						nameL.text = _refAddFiles.fileList[k].name;
						sizeL.text = formatFileSize(_refAddFiles.fileList[k].size);						
						_myFile = _refAddFiles.fileList[k];		
						/* }
						else
						{
						Alert.show("El Archivo adjuntado debe de pesar menos de 60 Kb", "r3Take Message");
						}	 */			
					}					
				}
				updateProgBar();				
				uploadCheck();
				fsW.visible = true;
			}
			
			// Called to format number to file size
			private function formatFileSize(numSize:Number):String {
				var strReturn:String;
				numSize = Number(numSize / 1000);
				strReturn = String(numSize.toFixed(1) + " KB");
				if (numSize > 1000) {
					numSize = numSize / 1000;
					strReturn = String(numSize.toFixed(1) + " MB");
					if (numSize > 1000) {
						numSize = numSize / 1000;
						strReturn = String(numSize.toFixed(1) + " GB");
					}
				}				
				return strReturn;
			}
			
			// Called to remove selected file(s) for upload
			private function removeFiles():void {
				try{
					fsW.visible = false;
					updateProgBar();					
					uploadCheck();
				} catch (er:Error) {}
			}
			
			// Called to check if there is at least one file to upload
			private function uploadCheck():void {
				if (nameL.text.length == 0) {
					btnUpload.enabled = false;					
				} else {
					btnUpload.enabled = true;					
				}
			}
			
			// Disable UI control
			private function disableUI():void {	
				btnUpload.enabled = false;
				btnCancel.enabled = true;				
			}
			
			// Enable UI control
			private function enableUI():void {				
				btnUpload.enabled = true;
				btnCancel.enabled = false;				
			}			
			
			// Called to delete file 
			private function startDelete():void {
				if (fileName.text.length > 0) {
					Alert.show("Remover Archivo?","Confirmación",Alert.YES|Alert.NO, null, doDelete, iconDel);
				}
			}
			
			private function doDelete(eventObj:CloseEvent):void{
				if (eventObj.detail==Alert.YES) {
					disableUI();
					var sendVars:URLVariables = new URLVariables();
					
					sendVars.action = "eliminar";
					sendVars.r3FilePath = _r3FilePath;
					sendVars.r3FileName = nameL.text;
					sendVars.r3IdRef = _r3IdRef;
					sendVars.r3DS = _r3DS;
					sendVars.r3SQL = _r3SQL;
					sendVars.r3SQLArgs = _r3SQLArgs;
					sendVars.r3AshxPath = _r3AshxPath;
					sendVars.r3Param1 = _r3Param1;
					sendVars.r3Param2 = _r3Param2;
					sendVars.r3Param3 = _r3Param3;
					sendVars.r3Param4 = _r3Param4;
					sendVars.r3Param5= _r3Param5;
					sendVars.r3Clase= _r3Clase;
					sendVars.r3Metodo= _r3Metodo;
					
					var request:URLRequest = new URLRequest();
					
					request.data = sendVars;
					request.url = _r3AshxPath;
					request.method = URLRequestMethod.POST;
					
					
					var loader:URLLoader = new URLLoader();
					loader.load(request);
					setAdd(null);
					Alert.show("Archivo Borrado!","");
				}
				
			}
			
			// Called to upload file
			private function startUpload():void {
				if (nameL.text.length > 0) {
					disableUI();															
					var sendVars:URLVariables = new URLVariables();			
					sendVars.action = "cargar";
					sendVars.r3FilePath = _r3FilePath;
					sendVars.r3FileName = nameL.text;
					sendVars.r3IdRef = _r3IdRef;
					sendVars.r3DS = _r3DS;
					sendVars.r3SQL = _r3SQL;
					sendVars.r3SQLArgs = _r3SQLArgs;
					sendVars.r3AshxPath = _r3AshxPath;
					sendVars.r3Param1 = _r3Param1;
					sendVars.r3Param2 = _r3Param2;
					sendVars.r3Param3 = _r3Param3;
					sendVars.r3Param4 = _r3Param4;
					sendVars.r3Param5= _r3Param5;
					sendVars.r3Clase= _r3Clase;
					sendVars.r3Metodo= _r3Metodo;
					
					
					var request:URLRequest = new URLRequest();
					request.data = sendVars;
					request.url = _r3AshxPath;
					request.method = URLRequestMethod.POST;
					_refUploadFile = new FileReference();
					_refUploadFile = _myFile;
					_refUploadFile.addEventListener(ProgressEvent.PROGRESS, onUploadProgress);
					_refUploadFile.addEventListener(Event.COMPLETE, onUploadComplete);
					_refUploadFile.addEventListener(IOErrorEvent.IO_ERROR, onUploadIoError);
					_refUploadFile.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onUploadSecurityError);
					_refUploadFile.upload(request, "file", false);
				}
			}
			
			// Cancel and clear eventlisteners on last upload
			private function clearUpload():void {
				_refUploadFile.removeEventListener(ProgressEvent.PROGRESS, onUploadProgress);
				_refUploadFile.removeEventListener(Event.COMPLETE, onUploadComplete);
				_refUploadFile.removeEventListener(IOErrorEvent.IO_ERROR, onUploadIoError);
				_refUploadFile.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onUploadSecurityError);
				_refUploadFile.cancel();				
				updateProgBar();
				enableUI();
			}
			
			// Called on upload cancel
			private function onUploadCanceled():void {
				clearUpload();
				dispatchEvent(new Event("uploadCancel"));
			}
			
			// Get upload progress
			private function onUploadProgress(event:ProgressEvent):void {
				var numPerc:Number = Math.round((event.bytesLoaded / event.bytesTotal) * 100);
				updateProgBar(numPerc);
				var evt:ProgressEvent = new ProgressEvent("uploadProgress", false, false, event.bytesLoaded, event.bytesTotal);
				dispatchEvent(evt);
			}
			
			// Update progBar
			private function updateProgBar(numPerc:Number = 0):void {
				var strLabel:String = "";
				strLabel = (numPerc > 0 && numPerc < 100) ? numPerc + "% - " + strLabel : strLabel;
				strLabel = (numPerc == 100) ? "Carga Completa - " + strLabel : strLabel;
				//strLabel = (_arrUploadFiles.length == 0) ? "" : strLabel;
				progBar.label = strLabel;
				progBar.setProgress(numPerc, 100);
				progBar.validateNow();
			}
			
			// Called on upload complete
			private function onUploadComplete(event:Event):void {				
				fileName.text = nameL.text;					
				clearUpload();
				dispatchEvent(new Event("uploadComplete"));
				removeFiles();
				Get(int(_r3ActionOnUploadComplete));				
			}
			
			// Called on upload io error
			private function onUploadIoError(event:IOErrorEvent):void {
				clearUpload();
				var evt:IOErrorEvent = new IOErrorEvent("uploadIoError", false, false, event.text);
				dispatchEvent(evt);
			}
			
			// Called on upload security error
			private function onUploadSecurityError(event:SecurityErrorEvent):void {
				clearUpload();
				var evt:SecurityErrorEvent = new SecurityErrorEvent("uploadSecurityError", false, false, event.text);
				dispatchEvent(evt);
			}	
		]]>
	</fx:Script>
	<s:Group x="0" y="0" width="100%" height="100%" >
		<mx:TitleWindow x="0" y="26" width="100%" layout="absolute" fontWeight="normal" title="Seleccione un Archivo" id="fsW" visible="false" showCloseButton="true" close="fsW.visible=false;" alpha="1">			
			<s:VGroup x="0" y="0" width="100%"  paddingBottom="4" paddingTop="4" paddingLeft="4" paddingRight="4">
				<mx:Label  text="Nombre" width="100%" id="nameL" fontWeight="normal"/>
				<mx:Label  text="Tamaño" width="100%" id="sizeL" fontWeight="normal"/>
			</s:VGroup>			
			<mx:ControlBar horizontalAlign="center" verticalAlign="middle" width="100%" horizontalGap="2" paddingLeft="3" paddingRight="3" paddingBottom="3" paddingTop="3">
				<mx:ProgressBar id="progBar" mode="manual" label="" labelPlacement="center" width="100%"  fontSize="8"/>
				<mx:Button label="Cargar"  fontWeight="normal" icon="@Embed(source='assets/bullet_go.png')" click="startUpload()"  id="btnUpload"/>
				<mx:Button label="Cancelar" fontWeight="normal" icon="@Embed(source='assets/cancel2.png')" click="onUploadCanceled()"  id="btnCancel"/>
			</mx:ControlBar>
		</mx:TitleWindow>
		<mx:ControlBar horizontalAlign="center" verticalAlign="middle" width="100%" horizontalGap="0" paddingBottom="0" paddingRight="0" paddingLeft="0" paddingTop="0">			
			<mx:TextInput  id="fileName" width="100%" editable="false"  height="24"/>
			<mx:Button  id="btnAdd" fontWeight="normal" icon="@Embed(source='assets/add.png')" toolTip="Adjuntar Archivo" width="26" height="24" creationComplete="setAdd(null);"/>
			<mx:Button id="btnRemove" fontWeight="normal" visible="false" icon="@Embed(source='assets/delete.png')" click="startDelete()" width="26" height="24" toolTip="Borrar Archivo"/>			
			
		</mx:ControlBar>		
	</s:Group>
</s:Group>