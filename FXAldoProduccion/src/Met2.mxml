<?xml version="1.0" encoding="utf-8"?>
<mx:ProgressBar creationComplete="onInit()"   
				xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:mx2="library://ns.adobe.com/flex/halo"
				xmlns:ns="library:adobe/flex/gumbo" >
	<fx:Script>
		<![CDATA[
		
			import mx.controls.Text;
			
			import mx.controls.Label;
			import mx.containers.Canvas;
			import mx.containers.VBox;
			import mx.controls.TextInput;
		
			private var _target:TextInput;
			
			private var intScore:int;
			private var percentage:int;
			[Bindable]
			private var strVerdict:String = "";			
			
			private var box:VBox = new VBox();
			
			[Bindable]
			public function set target(value:TextInput) : void {
				_target = value;
			}
			public function get target() : TextInput {
				return _target;
			}
			
			private function onInit() : void {
				_target.addEventListener(Event.CHANGE,onChange);	
				mode = "manual";
				setStyle("trackHeight",10);
				label = strVerdict;	
				
					
			}
			
			private function onChange(event:Event) : void {
				var passwd:String = _target.text;
				intScore   = 0
				strVerdict = "Facil"
	
				// PASSWORD LENGTH
				if (passwd.length<5)                           // length 4 or less
					intScore = (intScore+3)				
				else if (passwd.length>4 && passwd.length<8)   // length between 5 and 7
					intScore = (intScore+6)
				else if (passwd.length>7 && passwd.length<16)  // length between 8 and 15
					intScore = (intScore+12)
				else if (passwd.length>15)                     // length 16 or more
					intScore = (intScore+18)
				
				// LETTERS
				if (passwd.match(/[a-z]/))                     // [verified] at least one lower case letter
					intScore = (intScore+1)
				if (passwd.match(/[A-Z]/))                     // [verified] at least one upper case letter
					intScore = (intScore+5)
				
				// NUMBERS
				if (passwd.match(/\d+/))                       // [verified] at least one number
					intScore = (intScore+5)
				if (passwd.match(/(\d.*\d.*\d)/))              // [verified] at least three numbers
					intScore = (intScore+5)
				 
				// SPECIAL CHARACTERS
				if (passwd.match(/[!,@#$%^&*?_~]/))             // [verified] at least one special character
					intScore = (intScore+5)
				if (passwd.match(/([!,@#$%^&*?_~].*[!,@#$%^&*?_~])/)) // [verified] at least two special characters
					intScore = (intScore+5)
				 
				// COMBINATIONS
				if (passwd.match(/[a-z]/) && passwd.match(/[A-Z]/)) // [verified] both upper and lower case
					intScore = (intScore+2)
				if (passwd.match(/\d/) && passwd.match(/\D/)) // [verified] both letters and numbers
					intScore = (intScore+2)
				 
				// [Verified] Upper Letters, Lower Letters, numbers and special characters
				if (passwd.match(/[a-z]/) && passwd.match(/[A-Z]/) && passwd.match(/\d/) && passwd.match(/[!,@#$%^&*?_~]/))
					intScore = (intScore+2)
				
				if(intScore < 16) {
				   strVerdict = "Muy Facil"
				   percentage = 20;
				}
				else if (intScore > 15 && intScore < 25) {
				   strVerdict = "Facil"
				   percentage = 40;
				}
				else if (intScore > 24 && intScore < 35) {
				   strVerdict = "Medio"
				   percentage = 60;
				}
				else if (intScore > 34 && intScore < 45) {
				   strVerdict = "Dificil"
				   percentage = 80;
				}
				else {
				   strVerdict = "Muy Dificil"
				   percentage = 100;
				}	
				
				if(passwd.length == 0 ) {
					strVerdict ="";
					percentage = 0;
				}
				label = strVerdict;			
				this.setProgress(percentage,100); 
				
			}
			
			override protected function createChildren():void {
				super.createChildren();				
				
				
				this.addChild(box);
			}
			
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				super.updateDisplayList(unscaledWidth,unscaledHeight);
				
				box.setActualSize(box.getExplicitOrMeasuredWidth(),box.getExplicitOrMeasuredHeight());
				box.move(1,1);
			
			
                
            
             	this.setStyle("barColor","black");
             	
             	
            var trackHeight:Number = getStyle("trackHeight");

        	
             
            var g:Graphics = box.graphics;
             	
            var matr:Matrix = new Matrix();
            
	  		matr.createGradientBox(width, trackHeight , 0, -20, 0)			
			g.clear();
			g.beginGradientFill("linear", [0xFF0000,0xFFFF00,0x00FF00], [100, 100,100], [0,130,255],matr );
			g.drawRoundRect(0,0,percentage * 2  ,trackHeight - 2,0,0);
			//box.blendMode = BlendMode.HARDLIGHT;
			
			}
			
		]]>
	</fx:Script>
</mx:ProgressBar>
